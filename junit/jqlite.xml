<?xml version="1.0"?>
<testsuites>
  <testsuite name="Chrome 21.0" package="jqlite" timestamp="2012-09-20T02:32:52" id="0" hostname="dhcp-172-22-111-178.mtv.corp.google.com" tests="1574" errors="0" failures="0" time="3.622">
    <properties>
      <property name="browser.fullName" value="Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_4) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.89 Safari/537.1"/>
    </properties>
    <testcase name="should return new $window and $document after navigate" time="0.022" classname="jqlite Chrome 21.0.angular.scenario.Application"/>
    <testcase name="should execute callback with correct arguments" time="0.002" classname="jqlite Chrome 21.0.angular.scenario.Application"/>
    <testcase name="should use a new iframe each time" time="0.001" classname="jqlite Chrome 21.0.angular.scenario.Application"/>
    <testcase name="should call error handler if document not accessible" time="0.001" classname="jqlite Chrome 21.0.angular.scenario.Application"/>
    <testcase name="should call error handler if navigating to about:blank" time="0" classname="jqlite Chrome 21.0.angular.scenario.Application"/>
    <testcase name="should remove old iframes" time="0.001" classname="jqlite Chrome 21.0.angular.scenario.Application"/>
    <testcase name="should URL update description bar" time="0.002" classname="jqlite Chrome 21.0.angular.scenario.Application"/>
    <testcase name="should call onload handler when frame loads" time="0.002" classname="jqlite Chrome 21.0.angular.scenario.Application"/>
    <testcase name="should wait for pending requests in executeAction" time="0.015" classname="jqlite Chrome 21.0.angular.scenario.Application"/>
    <testcase name="should handle basic nested case" time="0.001" classname="jqlite Chrome 21.0.angular.scenario.Describe"/>
    <testcase name="should link nested describe blocks with parent and children" time="0" classname="jqlite Chrome 21.0.angular.scenario.Describe"/>
    <testcase name="should not process xit and xdescribe" time="0.001" classname="jqlite Chrome 21.0.angular.scenario.Describe"/>
    <testcase name="should only return iit and ddescribe if present" time="0" classname="jqlite Chrome 21.0.angular.scenario.Describe"/>
    <testcase name="should create uniqueIds in the tree" time="0.001" classname="jqlite Chrome 21.0.angular.scenario.Describe"/>
    <testcase name="should create uniqueIds for each spec" time="0" classname="jqlite Chrome 21.0.angular.scenario.Describe"/>
    <testcase name="should set the sane defaults" time="0.001" classname="jqlite Chrome 21.0.angular.scenario.Future"/>
    <testcase name="should be fulfilled after execution and done callback" time="0" classname="jqlite Chrome 21.0.angular.scenario.Future"/>
    <testcase name="should take callback with (error, result) and forward" time="0" classname="jqlite Chrome 21.0.angular.scenario.Future"/>
    <testcase name="should use error as value if provided" time="0.001" classname="jqlite Chrome 21.0.angular.scenario.Future"/>
    <testcase name="should parse json with fromJson" time="0" classname="jqlite Chrome 21.0.angular.scenario.Future"/>
    <testcase name="should convert to json with toJson" time="0.001" classname="jqlite Chrome 21.0.angular.scenario.Future"/>
    <testcase name="should convert with custom parser" time="0.001" classname="jqlite Chrome 21.0.angular.scenario.Future"/>
    <testcase name="should pass error if parser fails" time="0" classname="jqlite Chrome 21.0.angular.scenario.Future"/>
    <testcase name="should value default empty value" time="0.001" classname="jqlite Chrome 21.0.angular.scenario.ObjectModel"/>
    <testcase name="should add spec and create describe blocks on SpecBegin event" time="0.001" classname="jqlite Chrome 21.0.angular.scenario.ObjectModel"/>
    <testcase name="should set fullDefinitionName on SpecBegin event" time="0" classname="jqlite Chrome 21.0.angular.scenario.ObjectModel"/>
    <testcase name="should set fullDefinitionName on SpecBegin event (join more names by space)" time="0.001" classname="jqlite Chrome 21.0.angular.scenario.ObjectModel"/>
    <testcase name="should add step to spec on StepBegin" time="0" classname="jqlite Chrome 21.0.angular.scenario.ObjectModel"/>
    <testcase name="should update spec timer duration on SpecEnd event" time="0" classname="jqlite Chrome 21.0.angular.scenario.ObjectModel"/>
    <testcase name="should update step timer duration on StepEnd event" time="0.001" classname="jqlite Chrome 21.0.angular.scenario.ObjectModel"/>
    <testcase name="should set spec status on SpecEnd to success if no status set" time="0.001" classname="jqlite Chrome 21.0.angular.scenario.ObjectModel"/>
    <testcase name="should set status to error after SpecError" time="0" classname="jqlite Chrome 21.0.angular.scenario.ObjectModel"/>
    <testcase name="should set spec status to failure if step fails" time="0.003" classname="jqlite Chrome 21.0.angular.scenario.ObjectModel"/>
    <testcase name="should set spec status to error if step errors" time="0.001" classname="jqlite Chrome 21.0.angular.scenario.ObjectModel"/>
    <testcase name="should provide method for registering a listener" time="0" classname="jqlite Chrome 21.0.angular.scenario.ObjectModel events"/>
    <testcase name="should forward SpecBegin event" time="0.001" classname="jqlite Chrome 21.0.angular.scenario.ObjectModel events"/>
    <testcase name="should forward SpecBegin event with ObjectModel.Spec as a param" time="0.001" classname="jqlite Chrome 21.0.angular.scenario.ObjectModel events"/>
    <testcase name="should forward SpecError event" time="0" classname="jqlite Chrome 21.0.angular.scenario.ObjectModel events"/>
    <testcase name="should forward SpecError event with ObjectModel.Spec and error as a params" time="0.001" classname="jqlite Chrome 21.0.angular.scenario.ObjectModel events"/>
    <testcase name="should forward SpecEnd event" time="0" classname="jqlite Chrome 21.0.angular.scenario.ObjectModel events"/>
    <testcase name="should forward SpecEnd event with ObjectModel.Spec as a param" time="0" classname="jqlite Chrome 21.0.angular.scenario.ObjectModel events"/>
    <testcase name="should forward StepBegin event" time="0" classname="jqlite Chrome 21.0.angular.scenario.ObjectModel events"/>
    <testcase name="should forward StepBegin event with Spec and Step as params" time="0" classname="jqlite Chrome 21.0.angular.scenario.ObjectModel events"/>
    <testcase name="should forward StepError event" time="0.001" classname="jqlite Chrome 21.0.angular.scenario.ObjectModel events"/>
    <testcase name="should forward StepError event with Spec, Step and error as params" time="0" classname="jqlite Chrome 21.0.angular.scenario.ObjectModel events"/>
    <testcase name="should forward StepFailure event" time="0" classname="jqlite Chrome 21.0.angular.scenario.ObjectModel events"/>
    <testcase name="should forward StepFailure event with Spec, Step and error as params" time="0.001" classname="jqlite Chrome 21.0.angular.scenario.ObjectModel events"/>
    <testcase name="should forward StepEnd event" time="0" classname="jqlite Chrome 21.0.angular.scenario.ObjectModel events"/>
    <testcase name="should forward StepEnd event with Spec and Step as params" time="0.001" classname="jqlite Chrome 21.0.angular.scenario.ObjectModel events"/>
    <testcase name="should forward RunnerEnd event" time="0" classname="jqlite Chrome 21.0.angular.scenario.ObjectModel events"/>
    <testcase name="should set error of first failure" time="0" classname="jqlite Chrome 21.0.angular.scenario.ObjectModel events"/>
    <testcase name="should set line number of first failure" time="0" classname="jqlite Chrome 21.0.angular.scenario.ObjectModel events"/>
    <testcase name="should publish the functions in the public API" time="0.001" classname="jqlite Chrome 21.0.angular.scenario.Runner"/>
    <testcase name="should construct valid describe trees with public API" time="0" classname="jqlite Chrome 21.0.angular.scenario.Runner"/>
    <testcase name="should publish the DSL statements to the $window" time="0.004" classname="jqlite Chrome 21.0.angular.scenario.Runner"/>
    <testcase name="should create a new scope for each DSL chain" time="0.002" classname="jqlite Chrome 21.0.angular.scenario.Runner"/>
    <testcase name="should compile dom node and return scope" time="0.008" classname="jqlite Chrome 21.0.ScenarioSpec: Compilation compilation"/>
    <testcase name="should compile jQuery node and return scope" time="0.002" classname="jqlite Chrome 21.0.ScenarioSpec: Compilation compilation"/>
    <testcase name="should compile text node and return scope" time="0.003" classname="jqlite Chrome 21.0.ScenarioSpec: Compilation compilation"/>
    <testcase name="should bind futures to the spec" time="0.002" classname="jqlite Chrome 21.0.angular.scenario.SpecRunner"/>
    <testcase name="should pass done to future action behavior" time="0.003" classname="jqlite Chrome 21.0.angular.scenario.SpecRunner"/>
    <testcase name="should execute spec function and notify UI" time="0.003" classname="jqlite Chrome 21.0.angular.scenario.SpecRunner"/>
    <testcase name="should execute notify UI on spec setup error" time="0.004" classname="jqlite Chrome 21.0.angular.scenario.SpecRunner"/>
    <testcase name="should execute notify UI on step failure" time="0.003" classname="jqlite Chrome 21.0.angular.scenario.SpecRunner"/>
    <testcase name="should execute notify UI on step error" time="0.006" classname="jqlite Chrome 21.0.angular.scenario.SpecRunner"/>
    <testcase name="should run after handlers even if error in body of spec" time="0.002" classname="jqlite Chrome 21.0.angular.scenario.SpecRunner"/>
    <testcase name="should pause until resume to complete" time="0.004" classname="jqlite Chrome 21.0.angular.scenario.dsl Pause"/>
    <testcase name="should sleep for specified seconds" time="0.003" classname="jqlite Chrome 21.0.angular.scenario.dsl Sleep"/>
    <testcase name="should chain and execute matcher" time="0.003" classname="jqlite Chrome 21.0.angular.scenario.dsl Expect"/>
    <testcase name="should navigateTo" time="0.004" classname="jqlite Chrome 21.0.angular.scenario.dsl Browser Reload"/>
    <testcase name="should allow a string url" time="0.003" classname="jqlite Chrome 21.0.angular.scenario.dsl Browser NavigateTo"/>
    <testcase name="should allow a future url" time="0.003" classname="jqlite Chrome 21.0.angular.scenario.dsl Browser NavigateTo"/>
    <testcase name="should complete if angular is missing from app frame" time="0.005" classname="jqlite Chrome 21.0.angular.scenario.dsl Browser NavigateTo"/>
    <testcase name="should return full URL for href" time="0.003" classname="jqlite Chrome 21.0.angular.scenario.dsl Browser window"/>
    <testcase name="should return the pathname" time="0.002" classname="jqlite Chrome 21.0.angular.scenario.dsl Browser window"/>
    <testcase name="should return the search part" time="0.003" classname="jqlite Chrome 21.0.angular.scenario.dsl Browser window"/>
    <testcase name="should return the hash without the #" time="0.003" classname="jqlite Chrome 21.0.angular.scenario.dsl Browser window"/>
    <testcase name="should return full url" time="0.006" classname="jqlite Chrome 21.0.angular.scenario.dsl Browser location"/>
    <testcase name="should return the pathname" time="0.011" classname="jqlite Chrome 21.0.angular.scenario.dsl Browser location"/>
    <testcase name="should return the query string as an object" time="0.003" classname="jqlite Chrome 21.0.angular.scenario.dsl Browser location"/>
    <testcase name="should return the hash without the #" time="0.003" classname="jqlite Chrome 21.0.angular.scenario.dsl Browser location"/>
    <testcase name="should select single option" time="0.006" classname="jqlite Chrome 21.0.angular.scenario.dsl Element Finding Select"/>
    <testcase name="should select option by name" time="0.005" classname="jqlite Chrome 21.0.angular.scenario.dsl Element Finding Select"/>
    <testcase name="should select multiple options" time="0.003" classname="jqlite Chrome 21.0.angular.scenario.dsl Element Finding Select"/>
    <testcase name="should fail to select multiple options on non-multiple select" time="0.004" classname="jqlite Chrome 21.0.angular.scenario.dsl Element Finding Select"/>
    <testcase name="should execute click" time="0.004" classname="jqlite Chrome 21.0.angular.scenario.dsl Element Finding Element"/>
    <testcase name="should navigate page if click on anchor" time="0.004" classname="jqlite Chrome 21.0.angular.scenario.dsl Element Finding Element"/>
    <testcase name="should not navigate if click event was cancelled" time="0.005" classname="jqlite Chrome 21.0.angular.scenario.dsl Element Finding Element"/>
    <testcase name="should execute dblclick" time="0.004" classname="jqlite Chrome 21.0.angular.scenario.dsl Element Finding Element"/>
    <testcase name="should navigate page if dblclick on anchor" time="0.004" classname="jqlite Chrome 21.0.angular.scenario.dsl Element Finding Element"/>
    <testcase name="should not navigate if dblclick event was cancelled" time="0.003" classname="jqlite Chrome 21.0.angular.scenario.dsl Element Finding Element"/>
    <testcase name="should count matching elements" time="0.002" classname="jqlite Chrome 21.0.angular.scenario.dsl Element Finding Element"/>
    <testcase name="should return count of 0 if no matching elements" time="0.002" classname="jqlite Chrome 21.0.angular.scenario.dsl Element Finding Element"/>
    <testcase name="should get attribute" time="0.005" classname="jqlite Chrome 21.0.angular.scenario.dsl Element Finding Element"/>
    <testcase name="should set attribute" time="0.003" classname="jqlite Chrome 21.0.angular.scenario.dsl Element Finding Element"/>
    <testcase name="should get property" time="0.003" classname="jqlite Chrome 21.0.angular.scenario.dsl Element Finding Element"/>
    <testcase name="should set property" time="0.003" classname="jqlite Chrome 21.0.angular.scenario.dsl Element Finding Element"/>
    <testcase name="should get css" time="0.003" classname="jqlite Chrome 21.0.angular.scenario.dsl Element Finding Element"/>
    <testcase name="should set css" time="0.004" classname="jqlite Chrome 21.0.angular.scenario.dsl Element Finding Element"/>
    <testcase name="should add all jQuery key/value methods" time="0.001" classname="jqlite Chrome 21.0.angular.scenario.dsl Element Finding Element"/>
    <testcase name="should get val" time="0.014" classname="jqlite Chrome 21.0.angular.scenario.dsl Element Finding Element"/>
    <testcase name="should set val" time="0.004" classname="jqlite Chrome 21.0.angular.scenario.dsl Element Finding Element"/>
    <testcase name="should use correct future name for generated set methods" time="0.003" classname="jqlite Chrome 21.0.angular.scenario.dsl Element Finding Element"/>
    <testcase name="should use correct future name for generated get methods" time="0.003" classname="jqlite Chrome 21.0.angular.scenario.dsl Element Finding Element"/>
    <testcase name="should add all jQuery property methods" time="0.002" classname="jqlite Chrome 21.0.angular.scenario.dsl Element Finding Element"/>
    <testcase name="should execute custom query" time="0.003" classname="jqlite Chrome 21.0.angular.scenario.dsl Element Finding Element"/>
    <testcase name="should use the selector as label if none is given" time="0.003" classname="jqlite Chrome 21.0.angular.scenario.dsl Element Finding Element"/>
    <testcase name="should include the selector in paren when a label is given" time="0.015" classname="jqlite Chrome 21.0.angular.scenario.dsl Element Finding Element"/>
    <testcase name="should get the row count" time="0.01" classname="jqlite Chrome 21.0.angular.scenario.dsl Element Finding Repeater"/>
    <testcase name="should return 0 if repeater doesnt match" time="0.005" classname="jqlite Chrome 21.0.angular.scenario.dsl Element Finding Repeater"/>
    <testcase name="should get a row of bindings" time="0.009" classname="jqlite Chrome 21.0.angular.scenario.dsl Element Finding Repeater"/>
    <testcase name="should get a column of bindings" time="0.006" classname="jqlite Chrome 21.0.angular.scenario.dsl Element Finding Repeater"/>
    <testcase name="should use the selector as label if none is given" time="0.005" classname="jqlite Chrome 21.0.angular.scenario.dsl Element Finding Repeater"/>
    <testcase name="should include the selector in paren when a label is given" time="0.013" classname="jqlite Chrome 21.0.angular.scenario.dsl Element Finding Repeater"/>
    <testcase name="should select binding in interpolation" time="0.005" classname="jqlite Chrome 21.0.angular.scenario.dsl Element Finding Binding"/>
    <testcase name="should select binding in multiple interpolations" time="0.005" classname="jqlite Chrome 21.0.angular.scenario.dsl Element Finding Binding"/>
    <testcase name="should select binding by name" time="0.003" classname="jqlite Chrome 21.0.angular.scenario.dsl Element Finding Binding"/>
    <testcase name="should select binding by regexp" time="0.004" classname="jqlite Chrome 21.0.angular.scenario.dsl Element Finding Binding"/>
    <testcase name="should return innerHTML for all the other elements" time="0.009" classname="jqlite Chrome 21.0.angular.scenario.dsl Element Finding Binding"/>
    <testcase name="should select binding in template by name" time="0.008" classname="jqlite Chrome 21.0.angular.scenario.dsl Element Finding Binding"/>
    <testcase name="should match bindings by substring match" time="0.004" classname="jqlite Chrome 21.0.angular.scenario.dsl Element Finding Binding"/>
    <testcase name="should return error if no bindings in document" time="0.002" classname="jqlite Chrome 21.0.angular.scenario.dsl Element Finding Binding"/>
    <testcase name="should return error if no binding matches" time="0.004" classname="jqlite Chrome 21.0.angular.scenario.dsl Element Finding Binding"/>
    <testcase name="should prefix selector in $document.elements()" time="0.003" classname="jqlite Chrome 21.0.angular.scenario.dsl Element Finding Using"/>
    <testcase name="should use the selector as label if none is given" time="0.001" classname="jqlite Chrome 21.0.angular.scenario.dsl Element Finding Using"/>
    <testcase name="should include the selector in paren when a label is given" time="0.002" classname="jqlite Chrome 21.0.angular.scenario.dsl Element Finding Using"/>
    <testcase name="should change value in text input" time="0.003" classname="jqlite Chrome 21.0.angular.scenario.dsl Element Finding Input"/>
    <testcase name="should change value in text input in dash form" time="0.002" classname="jqlite Chrome 21.0.angular.scenario.dsl Element Finding Input"/>
    <testcase name="should return error if no input exists" time="0.003" classname="jqlite Chrome 21.0.angular.scenario.dsl Element Finding Input"/>
    <testcase name="should toggle checkbox state" time="0.004" classname="jqlite Chrome 21.0.angular.scenario.dsl Element Finding Input"/>
    <testcase name="should return error if checkbox did not match" time="0.003" classname="jqlite Chrome 21.0.angular.scenario.dsl Element Finding Input"/>
    <testcase name="should select option from radio group" time="0.003" classname="jqlite Chrome 21.0.angular.scenario.dsl Element Finding Input"/>
    <testcase name="should return error if radio button did not match" time="0.003" classname="jqlite Chrome 21.0.angular.scenario.dsl Element Finding Input"/>
    <testcase name="should return value in text input" time="0.002" classname="jqlite Chrome 21.0.angular.scenario.dsl Element Finding Input val"/>
    <testcase name="should change value in textarea" time="0.002" classname="jqlite Chrome 21.0.angular.scenario.dsl Element Finding Textarea"/>
    <testcase name="should return error if no textarea exists" time="0.002" classname="jqlite Chrome 21.0.angular.scenario.dsl Element Finding Textarea"/>
    <testcase name="should handle basic matching" time="0.001" classname="jqlite Chrome 21.0.angular.scenario.matchers"/>
    <testcase name="should have toHaveClass matcher" time="0" classname="jqlite Chrome 21.0.angular.scenario.matchers"/>
    <testcase name="should create nested describe context" time="0.005" classname="jqlite Chrome 21.0.angular.scenario.output.html"/>
    <testcase name="should add link on InteractivePause" time="0.004" classname="jqlite Chrome 21.0.angular.scenario.output.html"/>
    <testcase name="should update totals when steps complete" time="0.009" classname="jqlite Chrome 21.0.angular.scenario.output.html"/>
    <testcase name="should update timer when test completes" time="0.004" classname="jqlite Chrome 21.0.angular.scenario.output.html"/>
    <testcase name="should include line if provided" time="0.003" classname="jqlite Chrome 21.0.angular.scenario.output.html"/>
    <testcase name="should put json in context on RunnerEnd" time="0.001" classname="jqlite Chrome 21.0.angular.scenario.output.json"/>
    <testcase name="should create a global variable $result" time="0.001" classname="jqlite Chrome 21.0.angular.scenario.output.object"/>
    <testcase name="should maintain live state in $result" time="0" classname="jqlite Chrome 21.0.angular.scenario.output.object"/>
    <testcase name="should create XML nodes for object model" time="0.001" classname="jqlite Chrome 21.0.angular.scenario.output.json"/>
    <testcase name="should change case" time="0.001" classname="jqlite Chrome 21.0.angular case"/>
    <testcase name="should return same object" time="0" classname="jqlite Chrome 21.0.angular copy"/>
    <testcase name="should copy Date" time="0" classname="jqlite Chrome 21.0.angular copy"/>
    <testcase name="should copy array" time="0" classname="jqlite Chrome 21.0.angular copy"/>
    <testcase name="should copy empty array" time="0" classname="jqlite Chrome 21.0.angular copy"/>
    <testcase name="should copy object" time="0" classname="jqlite Chrome 21.0.angular copy"/>
    <testcase name="should copy primitives" time="0" classname="jqlite Chrome 21.0.angular copy"/>
    <testcase name="should throw an exception if a Scope is being copied" time="0.002" classname="jqlite Chrome 21.0.angular copy"/>
    <testcase name="should throw an exception if a Window is being copied" time="0" classname="jqlite Chrome 21.0.angular copy"/>
    <testcase name="should throw an exception when source and destination are equivalent" time="0" classname="jqlite Chrome 21.0.angular copy"/>
    <testcase name="should make a copy" time="0.001" classname="jqlite Chrome 21.0.angular shallow copy"/>
    <testcase name="should not copy $$ properties nor prototype properties" time="0" classname="jqlite Chrome 21.0.angular shallow copy"/>
    <testcase name="should dump element" time="0.001" classname="jqlite Chrome 21.0.angular elementHTML"/>
    <testcase name="should return true if same object" time="0" classname="jqlite Chrome 21.0.angular equals"/>
    <testcase name="should recurse into object" time="0.001" classname="jqlite Chrome 21.0.angular equals"/>
    <testcase name="should ignore $ member variables" time="0" classname="jqlite Chrome 21.0.angular equals"/>
    <testcase name="should ignore functions" time="0" classname="jqlite Chrome 21.0.angular equals"/>
    <testcase name="should work well with nulls" time="0" classname="jqlite Chrome 21.0.angular equals"/>
    <testcase name="should work well with undefined" time="0" classname="jqlite Chrome 21.0.angular equals"/>
    <testcase name="should treat two NaNs as equal" time="0" classname="jqlite Chrome 21.0.angular equals"/>
    <testcase name="should compare Scope instances only by identity" time="0.001" classname="jqlite Chrome 21.0.angular equals"/>
    <testcase name="should compare Window instances only by identity" time="0.005" classname="jqlite Chrome 21.0.angular equals"/>
    <testcase name="should compare dates" time="0.001" classname="jqlite Chrome 21.0.angular equals"/>
    <testcase name="should return the number of items in an array" time="0" classname="jqlite Chrome 21.0.angular size"/>
    <testcase name="should return the number of properties of an object" time="0" classname="jqlite Chrome 21.0.angular size"/>
    <testcase name="should return the number of own properties of an object" time="0.001" classname="jqlite Chrome 21.0.angular size"/>
    <testcase name="should return the string length" time="0" classname="jqlite Chrome 21.0.angular size"/>
    <testcase name="should not rely on length property of an object to determine its size" time="0" classname="jqlite Chrome 21.0.angular size"/>
    <testcase name="should parse a string into key-value pairs" time="0.001" classname="jqlite Chrome 21.0.angular parseKeyValue"/>
    <testcase name="should parse key-value pairs into string" time="0.001" classname="jqlite Chrome 21.0.angular toKeyValue"/>
    <testcase name="should parse true values into flags" time="0" classname="jqlite Chrome 21.0.angular toKeyValue"/>
    <testcase name="should iterate over *own* object properties" time="0" classname="jqlite Chrome 21.0.angular forEach"/>
    <testcase name="should collect keys from object" time="0.001" classname="jqlite Chrome 21.0.angular sortedKeys"/>
    <testcase name="should correctly encode uri segment and not encode chars defined as pchar set in rfc3986" time="0" classname="jqlite Chrome 21.0.angular encodeUriSegment"/>
    <testcase name="should correctly encode uri query and not encode chars defined as pchar set in rfc3986" time="0.001" classname="jqlite Chrome 21.0.angular encodeUriQuery"/>
    <testcase name="should do nothing when not found" time="0" classname="jqlite Chrome 21.0.angular angularInit"/>
    <testcase name="should look for ngApp directive as attr" time="0.001" classname="jqlite Chrome 21.0.angular angularInit"/>
    <testcase name="should look for ngApp directive in id" time="0" classname="jqlite Chrome 21.0.angular angularInit"/>
    <testcase name="should look for ngApp directive in className" time="0.001" classname="jqlite Chrome 21.0.angular angularInit"/>
    <testcase name="should look for ngApp directive using querySelectorAll" time="0.001" classname="jqlite Chrome 21.0.angular angularInit"/>
    <testcase name="should bootstrap using class name" time="0.001" classname="jqlite Chrome 21.0.angular angularInit"/>
    <testcase name="should bootstrap anonymously" time="0.001" classname="jqlite Chrome 21.0.angular angularInit"/>
    <testcase name="should bootstrap anonymously using class only" time="0.001" classname="jqlite Chrome 21.0.angular angularInit"/>
    <testcase name="should bootstrap if the annotation is on the root element" time="0" classname="jqlite Chrome 21.0.angular angularInit"/>
    <testcase name="should complain if app module cannot be found" time="0.002" classname="jqlite Chrome 21.0.angular angularInit"/>
    <testcase name="should override services" time="0.002" classname="jqlite Chrome 21.0.angular angular service"/>
    <testcase name="should inject dependencies specified by $inject and ignore function argument name" time="0" classname="jqlite Chrome 21.0.angular angular service"/>
    <testcase name="should return true for Date object" time="0.001" classname="jqlite Chrome 21.0.angular isDate"/>
    <testcase name="should return false for non Date objects" time="0" classname="jqlite Chrome 21.0.angular isDate"/>
    <testcase name="should link to existing node and create scope" time="0.003" classname="jqlite Chrome 21.0.angular compile"/>
    <testcase name="should link to existing node and given scope" time="0.003" classname="jqlite Chrome 21.0.angular compile"/>
    <testcase name="should link to new node and given scope" time="0.003" classname="jqlite Chrome 21.0.angular compile"/>
    <testcase name="should link to cloned node and create scope" time="0.006" classname="jqlite Chrome 21.0.angular compile"/>
    <testcase name="should correctly detect node name with &quot;namespace&quot; when xmlns is defined" time="0.001" classname="jqlite Chrome 21.0.angular nodeName_"/>
    <testcase name="should correctly detect node name with &quot;namespace&quot; when xmlns is NOT defined" time="0" classname="jqlite Chrome 21.0.angular nodeName_"/>
    <testcase name="should return new id per call" time="0.007" classname="jqlite Chrome 21.0.angular nextUid()"/>
    <testcase name="version should have full/major/minor/dot/codeName properties" time="0.001" classname="jqlite Chrome 21.0.angular version"/>
    <testcase name="should bootstrap app" time="0.003" classname="jqlite Chrome 21.0.angular bootstrap"/>
    <testcase name="should complain if app module can&apos;t be found" time="0.002" classname="jqlite Chrome 21.0.angular bootstrap"/>
    <testcase name="should show starting element tag only" time="0" classname="jqlite Chrome 21.0.angular startingElementHtml"/>
    <testcase name="should convert to snake_case" time="0.001" classname="jqlite Chrome 21.0.angular snake_case"/>
    <testcase name="should delegate to JSON.parse" time="0.001" classname="jqlite Chrome 21.0.angular fromJson"/>
    <testcase name="should delegate to JSON.stringify" time="0" classname="jqlite Chrome 21.0.angular toJson"/>
    <testcase name="should format objects pretty" time="0.001" classname="jqlite Chrome 21.0.angular toJson"/>
    <testcase name="should not serialize properties starting with $" time="0" classname="jqlite Chrome 21.0.angular toJson"/>
    <testcase name="should not serialize $window object" time="0" classname="jqlite Chrome 21.0.angular toJson"/>
    <testcase name="should not serialize $document object" time="0.001" classname="jqlite Chrome 21.0.angular toJson"/>
    <testcase name="should not serialize scope instances" time="0.001" classname="jqlite Chrome 21.0.angular toJson"/>
    <testcase name="should do basic crud" time="0" classname="jqlite Chrome 21.0.api HashMap"/>
    <testcase name="should init from an array" time="0" classname="jqlite Chrome 21.0.api HashMap"/>
    <testcase name="should do basic crud with collections" time="0.001" classname="jqlite Chrome 21.0.api HashQueueMap"/>
    <testcase name="should support primitive and object keys" time="0" classname="jqlite Chrome 21.0.api HashQueueMap"/>
    <testcase name="BindUpdate" time="0.004" classname="jqlite Chrome 21.0.Binder"/>
    <testcase name="ExecuteInitialization" time="0.003" classname="jqlite Chrome 21.0.Binder"/>
    <testcase name="ExecuteInitializationStatements" time="0.002" classname="jqlite Chrome 21.0.Binder"/>
    <testcase name="ApplyTextBindings" time="0.003" classname="jqlite Chrome 21.0.Binder"/>
    <testcase name="InputTypeButtonActionExecutesInScope" time="0.004" classname="jqlite Chrome 21.0.Binder"/>
    <testcase name="InputTypeButtonActionExecutesInScope2" time="0.004" classname="jqlite Chrome 21.0.Binder"/>
    <testcase name="ButtonElementActionExecutesInScope" time="0.004" classname="jqlite Chrome 21.0.Binder"/>
    <testcase name="RepeaterUpdateBindings" time="0.016" classname="jqlite Chrome 21.0.Binder"/>
    <testcase name="RepeaterContentDoesNotBind" time="0.005" classname="jqlite Chrome 21.0.Binder"/>
    <testcase name="DoNotOverwriteCustomAction" time="0.004" classname="jqlite Chrome 21.0.Binder"/>
    <testcase name="ItShouldRemoveExtraChildrenWhenIteratingOverHash" time="0.004" classname="jqlite Chrome 21.0.Binder"/>
    <testcase name="IfTextBindingThrowsErrorDecorateTheSpan" time="0.003" classname="jqlite Chrome 21.0.Binder"/>
    <testcase name="IfAttrBindingThrowsErrorDecorateTheAttribute" time="0.003" classname="jqlite Chrome 21.0.Binder"/>
    <testcase name="NestedRepeater" time="0.011" classname="jqlite Chrome 21.0.Binder"/>
    <testcase name="HideBindingExpression" time="0.003" classname="jqlite Chrome 21.0.Binder"/>
    <testcase name="HideBinding" time="0.002" classname="jqlite Chrome 21.0.Binder"/>
    <testcase name="ShowBinding" time="0.002" classname="jqlite Chrome 21.0.Binder"/>
    <testcase name="BindClass" time="0.004" classname="jqlite Chrome 21.0.Binder"/>
    <testcase name="BindClassEvenOdd" time="0.006" classname="jqlite Chrome 21.0.Binder"/>
    <testcase name="BindStyle" time="0.002" classname="jqlite Chrome 21.0.Binder"/>
    <testcase name="ActionOnAHrefThrowsError" time="0.003" classname="jqlite Chrome 21.0.Binder"/>
    <testcase name="ShoulIgnoreVbNonBindable" time="0.003" classname="jqlite Chrome 21.0.Binder"/>
    <testcase name="ShouldTemplateBindPreElements" time="0.004" classname="jqlite Chrome 21.0.Binder"/>
    <testcase name="FillInOptionValueWhenMissing" time="0.005" classname="jqlite Chrome 21.0.Binder"/>
    <testcase name="ItShouldSelectTheCorrectRadioBox" time="0.004" classname="jqlite Chrome 21.0.Binder"/>
    <testcase name="ItShouldRepeatOnHashes" time="0.006" classname="jqlite Chrome 21.0.Binder"/>
    <testcase name="ItShouldFireChangeListenersBeforeUpdate" time="0.004" classname="jqlite Chrome 21.0.Binder"/>
    <testcase name="ItShouldHandleMultilineBindings" time="0.003" classname="jqlite Chrome 21.0.Binder"/>
    <testcase name="should be jqLite when jqLiteMode is on, otherwise jQuery" time="0.015" classname="jqlite Chrome 21.0.jqLite"/>
    <testcase name="should allow construction with text node" time="0.002" classname="jqlite Chrome 21.0.jqLite construction"/>
    <testcase name="should allow construction with html" time="0.002" classname="jqlite Chrome 21.0.jqLite construction"/>
    <testcase name="should allow creation of comment tags" time="0.003" classname="jqlite Chrome 21.0.jqLite construction"/>
    <testcase name="should allow creation of script tags" time="0.002" classname="jqlite Chrome 21.0.jqLite construction"/>
    <testcase name="should wrap document fragment" time="0.002" classname="jqlite Chrome 21.0.jqLite construction"/>
    <testcase name="should retrieve data attached to the current element" time="0.002" classname="jqlite Chrome 21.0.jqLite inheritedData"/>
    <testcase name="should walk up the dom to find data" time="0.002" classname="jqlite Chrome 21.0.jqLite inheritedData"/>
    <testcase name="should return undefined when no data was found" time="0.002" classname="jqlite Chrome 21.0.jqLite inheritedData"/>
    <testcase name="should work with the child html element instead if the current element is the document obj" time="0.002" classname="jqlite Chrome 21.0.jqLite inheritedData"/>
    <testcase name="should retrieve scope attached to the current element" time="0.007" classname="jqlite Chrome 21.0.jqLite scope"/>
    <testcase name="should retrieve scope attached to the html element if its requested on the document" time="0.002" classname="jqlite Chrome 21.0.jqLite scope"/>
    <testcase name="should walk up the dom to find scope" time="0.002" classname="jqlite Chrome 21.0.jqLite scope"/>
    <testcase name="should return undefined when no scope was found" time="0.002" classname="jqlite Chrome 21.0.jqLite scope"/>
    <testcase name="should retrieve injector attached to the current element or its parent" time="0.003" classname="jqlite Chrome 21.0.jqLite injector"/>
    <testcase name="should retrieve injector attached to the html element if its requested on document" time="0.003" classname="jqlite Chrome 21.0.jqLite injector"/>
    <testcase name="should do nothing with a noncompiled template" time="0.002" classname="jqlite Chrome 21.0.jqLite injector"/>
    <testcase name="should retrieve controller attached to the current element or its parent" time="0.001" classname="jqlite Chrome 21.0.jqLite controller"/>
    <testcase name="should set and get and remove data" time="0.003" classname="jqlite Chrome 21.0.jqLite data"/>
    <testcase name="should emit $destroy event if element removed via remove()" time="0.002" classname="jqlite Chrome 21.0.jqLite data"/>
    <testcase name="should emit $destroy event if an element is removed via html()" time="0.003" classname="jqlite Chrome 21.0.jqLite data"/>
    <testcase name="should retrieve all data if called without params" time="0.003" classname="jqlite Chrome 21.0.jqLite data"/>
    <testcase name="should create a new data object if called without args" time="0.002" classname="jqlite Chrome 21.0.jqLite data"/>
    <testcase name="should create a new data object if called with a single object arg" time="0.001" classname="jqlite Chrome 21.0.jqLite data"/>
    <testcase name="should merge existing data object with a new one if called with a single object arg" time="0.003" classname="jqlite Chrome 21.0.jqLite data"/>
    <testcase name="should remove data on element removal" time="0.001" classname="jqlite Chrome 21.0.jqLite data data cleanup"/>
    <testcase name="should remove event listeners on element removal" time="0.003" classname="jqlite Chrome 21.0.jqLite data data cleanup"/>
    <testcase name="should read write and remove attr" time="0.003" classname="jqlite Chrome 21.0.jqLite attr"/>
    <testcase name="should read boolean attributes as strings" time="0.002" classname="jqlite Chrome 21.0.jqLite attr"/>
    <testcase name="should add/remove boolean attributes" time="0.003" classname="jqlite Chrome 21.0.jqLite attr"/>
    <testcase name="should normalize the case of boolean attributes" time="0.003" classname="jqlite Chrome 21.0.jqLite attr"/>
    <testcase name="should return undefined for non-existing attributes" time="0.002" classname="jqlite Chrome 21.0.jqLite attr"/>
    <testcase name="should return undefined for non-existing attributes on input" time="0.002" classname="jqlite Chrome 21.0.jqLite attr"/>
    <testcase name="should read element property" time="0.002" classname="jqlite Chrome 21.0.jqLite prop"/>
    <testcase name="should set element property to a value" time="0.001" classname="jqlite Chrome 21.0.jqLite prop"/>
    <testcase name="should set boolean element property" time="0.003" classname="jqlite Chrome 21.0.jqLite prop"/>
    <testcase name="should check class" time="0.002" classname="jqlite Chrome 21.0.jqLite class hasClass"/>
    <testcase name="should make sure that partial class is not checked as a subset" time="0.004" classname="jqlite Chrome 21.0.jqLite class hasClass"/>
    <testcase name="should allow adding of class" time="0.002" classname="jqlite Chrome 21.0.jqLite class addClass"/>
    <testcase name="should ignore falsy values" time="0.002" classname="jqlite Chrome 21.0.jqLite class addClass"/>
    <testcase name="should allow multiple classes to be added in a single string" time="0.002" classname="jqlite Chrome 21.0.jqLite class addClass"/>
    <testcase name="should not add duplicate classes" time="0.002" classname="jqlite Chrome 21.0.jqLite class addClass"/>
    <testcase name="should allow toggling of class" time="0.003" classname="jqlite Chrome 21.0.jqLite class toggleClass"/>
    <testcase name="should allow removal of class" time="0.002" classname="jqlite Chrome 21.0.jqLite class removeClass"/>
    <testcase name="should correctly remove middle class" time="0.002" classname="jqlite Chrome 21.0.jqLite class removeClass"/>
    <testcase name="should remove multiple classes specified as one string" time="0.001" classname="jqlite Chrome 21.0.jqLite class removeClass"/>
    <testcase name="should set and read css" time="0.003" classname="jqlite Chrome 21.0.jqLite css"/>
    <testcase name="should set a bunch of css properties specified via an object" time="0.003" classname="jqlite Chrome 21.0.jqLite css"/>
    <testcase name="should correctly handle dash-separated and camelCased properties" time="0.02" classname="jqlite Chrome 21.0.jqLite css"/>
    <testcase name="should return null on empty" time="0.002" classname="jqlite Chrome 21.0.jqLite text"/>
    <testcase name="should read/write value" time="0.001" classname="jqlite Chrome 21.0.jqLite text"/>
    <testcase name="should read, write value" time="0.002" classname="jqlite Chrome 21.0.jqLite val"/>
    <testcase name="should return null on empty" time="0.001" classname="jqlite Chrome 21.0.jqLite html"/>
    <testcase name="should read/write value" time="0.002" classname="jqlite Chrome 21.0.jqLite html"/>
    <testcase name="should bind to window on hashchange" time="0.001" classname="jqlite Chrome 21.0.jqLite bind"/>
    <testcase name="should bind to all elements and return functions" time="0.002" classname="jqlite Chrome 21.0.jqLite bind"/>
    <testcase name="should bind to all events separated by space" time="0.002" classname="jqlite Chrome 21.0.jqLite bind"/>
    <testcase name="should set event.target on IE" time="0.001" classname="jqlite Chrome 21.0.jqLite bind"/>
    <testcase name="should have event.isDefaultPrevented method" time="0.002" classname="jqlite Chrome 21.0.jqLite bind"/>
    <testcase name="should fire mouseenter when coming from outside the browser window" time="0.002" classname="jqlite Chrome 21.0.jqLite bind mouseenter-mouseleave"/>
    <testcase name="should do nothing when no listener was registered with bound" time="0.002" classname="jqlite Chrome 21.0.jqLite unbind"/>
    <testcase name="should deregister all listeners" time="0.001" classname="jqlite Chrome 21.0.jqLite unbind"/>
    <testcase name="should deregister listeners for specific type" time="0.002" classname="jqlite Chrome 21.0.jqLite unbind"/>
    <testcase name="should deregister specific listener" time="0.002" classname="jqlite Chrome 21.0.jqLite unbind"/>
    <testcase name="should replaceWith" time="0.001" classname="jqlite Chrome 21.0.jqLite replaceWith"/>
    <testcase name="should replaceWith text" time="0.002" classname="jqlite Chrome 21.0.jqLite replaceWith"/>
    <testcase name="should select non-text children" time="0.001" classname="jqlite Chrome 21.0.jqLite children"/>
    <testcase name="should select all children nodes" time="0.002" classname="jqlite Chrome 21.0.jqLite contents"/>
    <testcase name="should append" time="0.002" classname="jqlite Chrome 21.0.jqLite append"/>
    <testcase name="should append text" time="0.001" classname="jqlite Chrome 21.0.jqLite append"/>
    <testcase name="should not append anything if parent node is not of type element" time="0.002" classname="jqlite Chrome 21.0.jqLite append"/>
    <testcase name="should wrap text node" time="0.002" classname="jqlite Chrome 21.0.jqLite wrap"/>
    <testcase name="should wrap free text node" time="0.001" classname="jqlite Chrome 21.0.jqLite wrap"/>
    <testcase name="should prepend to empty" time="0.001" classname="jqlite Chrome 21.0.jqLite prepend"/>
    <testcase name="should prepend to content" time="0.001" classname="jqlite Chrome 21.0.jqLite prepend"/>
    <testcase name="should prepend text to content" time="0.001" classname="jqlite Chrome 21.0.jqLite prepend"/>
    <testcase name="should remove" time="0.002" classname="jqlite Chrome 21.0.jqLite remove"/>
    <testcase name="should after" time="0.002" classname="jqlite Chrome 21.0.jqLite after"/>
    <testcase name="should allow taking text" time="0.001" classname="jqlite Chrome 21.0.jqLite after"/>
    <testcase name="should return parent or an empty set when no parent" time="0.003" classname="jqlite Chrome 21.0.jqLite parent"/>
    <testcase name="should return empty set when no parent" time="0.001" classname="jqlite Chrome 21.0.jqLite parent"/>
    <testcase name="should return empty jqLite object when parent is a document fragment" time="0.002" classname="jqlite Chrome 21.0.jqLite parent"/>
    <testcase name="should return next sibling" time="0.001" classname="jqlite Chrome 21.0.jqLite next"/>
    <testcase name="should find child by name" time="0.001" classname="jqlite Chrome 21.0.jqLite find"/>
    <testcase name="should select the nth element " time="0.002" classname="jqlite Chrome 21.0.jqLite eq"/>
    <testcase name="should leave non-dashed strings alone" time="0.001" classname="jqlite Chrome 21.0.jqLite camelCase"/>
    <testcase name="should covert dash-separated strings to camelCase" time="0.001" classname="jqlite Chrome 21.0.jqLite camelCase"/>
    <testcase name="should covert browser specific css properties" time="0.001" classname="jqlite Chrome 21.0.jqLite camelCase"/>
    <testcase name="should set up namespace" time="0" classname="jqlite Chrome 21.0.module loader"/>
    <testcase name="should not override existing namespace" time="0" classname="jqlite Chrome 21.0.module loader"/>
    <testcase name="should record calls" time="0.001" classname="jqlite Chrome 21.0.module loader"/>
    <testcase name="should allow module redefinition" time="0.001" classname="jqlite Chrome 21.0.module loader"/>
    <testcase name="should complain of no module" time="0" classname="jqlite Chrome 21.0.module loader"/>
    <testcase name="should return same instance from calling provider" time="0.001" classname="jqlite Chrome 21.0.injector"/>
    <testcase name="should inject providers" time="0.001" classname="jqlite Chrome 21.0.injector"/>
    <testcase name="should resolve dependency graph and instantiate all services just once" time="0.001" classname="jqlite Chrome 21.0.injector"/>
    <testcase name="should provide useful message if no provider" time="0.001" classname="jqlite Chrome 21.0.injector"/>
    <testcase name="should proved path to the missing provider" time="0.001" classname="jqlite Chrome 21.0.injector"/>
    <testcase name="should create a new $injector for the run phase" time="0.001" classname="jqlite Chrome 21.0.injector"/>
    <testcase name="should call function" time="0.001" classname="jqlite Chrome 21.0.injector invoke"/>
    <testcase name="should treat array as annotations" time="0.001" classname="jqlite Chrome 21.0.injector invoke"/>
    <testcase name="should invoke the passed-in fn with all of the dependencies as arguments" time="0.001" classname="jqlite Chrome 21.0.injector invoke"/>
    <testcase name="should fail with errors if not function or array" time="0.001" classname="jqlite Chrome 21.0.injector invoke"/>
    <testcase name="should return $inject" time="0.001" classname="jqlite Chrome 21.0.injector annotation"/>
    <testcase name="should create $inject" time="0.001" classname="jqlite Chrome 21.0.injector annotation"/>
    <testcase name="should strip leading and trailing underscores from arg name during inference" time="0.001" classname="jqlite Chrome 21.0.injector annotation"/>
    <testcase name="should handle no arg functions" time="0.001" classname="jqlite Chrome 21.0.injector annotation"/>
    <testcase name="should handle no arg functions with spaces in the arguments list" time="0.001" classname="jqlite Chrome 21.0.injector annotation"/>
    <testcase name="should handle args with both $ and _" time="0.001" classname="jqlite Chrome 21.0.injector annotation"/>
    <testcase name="should throw on non function arg" time="0.001" classname="jqlite Chrome 21.0.injector annotation"/>
    <testcase name="should publish annotate API" time="0.001" classname="jqlite Chrome 21.0.injector annotation"/>
    <testcase name="should have $injector" time="0.001" classname="jqlite Chrome 21.0.injector"/>
    <testcase name="should define module" time="0.001" classname="jqlite Chrome 21.0.injector"/>
    <testcase name="should provide $injector even when no module is requested" time="0.002" classname="jqlite Chrome 21.0.injector module"/>
    <testcase name="should load multiple function modules and infer inject them" time="0.001" classname="jqlite Chrome 21.0.injector module"/>
    <testcase name="should run symbolic modules" time="0.001" classname="jqlite Chrome 21.0.injector module"/>
    <testcase name="should error on invalid module name" time="0.001" classname="jqlite Chrome 21.0.injector module"/>
    <testcase name="should load dependant modules only once" time="0.003" classname="jqlite Chrome 21.0.injector module"/>
    <testcase name="should execute runBlocks after injector creation" time="0.001" classname="jqlite Chrome 21.0.injector module"/>
    <testcase name="should create configuration injectable constants" time="0.001" classname="jqlite Chrome 21.0.injector module $provide constant"/>
    <testcase name="should configure $provide values" time="0.002" classname="jqlite Chrome 21.0.injector module $provide value"/>
    <testcase name="should configure a set of values" time="0.001" classname="jqlite Chrome 21.0.injector module $provide value"/>
    <testcase name="should configure $provide factory function" time="0.001" classname="jqlite Chrome 21.0.injector module $provide factory"/>
    <testcase name="should configure a set of factories" time="0.001" classname="jqlite Chrome 21.0.injector module $provide factory"/>
    <testcase name="should register a class" time="0.002" classname="jqlite Chrome 21.0.injector module $provide service"/>
    <testcase name="should register a set of classes" time="0.001" classname="jqlite Chrome 21.0.injector module $provide service"/>
    <testcase name="should configure $provide provider object" time="0.003" classname="jqlite Chrome 21.0.injector module $provide provider"/>
    <testcase name="should configure $provide provider type" time="0.002" classname="jqlite Chrome 21.0.injector module $provide provider"/>
    <testcase name="should configure a set of providers" time="0.002" classname="jqlite Chrome 21.0.injector module $provide provider"/>
    <testcase name="should be called with the original instance" time="0.001" classname="jqlite Chrome 21.0.injector module $provide decorator"/>
    <testcase name="should allow multiple decorators to be applied to a service" time="0.001" classname="jqlite Chrome 21.0.injector module $provide decorator"/>
    <testcase name="should decorate services with dependencies" time="0.002" classname="jqlite Chrome 21.0.injector module $provide decorator"/>
    <testcase name="should allow for decorators to be injectable" time="0.001" classname="jqlite Chrome 21.0.injector module $provide decorator"/>
    <testcase name="should handle wrong argument type" time="0.002" classname="jqlite Chrome 21.0.injector module error handling"/>
    <testcase name="should handle exceptions" time="0.001" classname="jqlite Chrome 21.0.injector module error handling"/>
    <testcase name="should decorate the missing service error with module name" time="0.002" classname="jqlite Chrome 21.0.injector module error handling"/>
    <testcase name="should decorate the missing service error with module function" time="0.001" classname="jqlite Chrome 21.0.injector module error handling"/>
    <testcase name="should decorate the missing service error with module array function" time="0.002" classname="jqlite Chrome 21.0.injector module error handling"/>
    <testcase name="should throw error when trying to inject oneself" time="0.014" classname="jqlite Chrome 21.0.injector module error handling"/>
    <testcase name="should throw error when trying to inject circular dependency" time="0.002" classname="jqlite Chrome 21.0.injector module error handling"/>
    <testcase name="should retrieve by name and cache instance" time="0.002" classname="jqlite Chrome 21.0.injector retrieval"/>
    <testcase name="should call functions and infer arguments" time="0.002" classname="jqlite Chrome 21.0.injector retrieval"/>
    <testcase name="should invoke method" time="0.002" classname="jqlite Chrome 21.0.injector method invoking"/>
    <testcase name="should invoke method with locals" time="0.001" classname="jqlite Chrome 21.0.injector method invoking"/>
    <testcase name="should invoke method which is annotated" time="0.003" classname="jqlite Chrome 21.0.injector method invoking"/>
    <testcase name="should invoke method which is an array of annotation" time="0.001" classname="jqlite Chrome 21.0.injector method invoking"/>
    <testcase name="should throw usefull error on wrong argument type]" time="0.002" classname="jqlite Chrome 21.0.injector method invoking"/>
    <testcase name="should instantiate object and preserve constructor property and be instanceof" time="0.002" classname="jqlite Chrome 21.0.injector service instantiation"/>
    <testcase name="should instantiate object and preserve constructor property and be instanceof with the array annotated type" time="0.002" classname="jqlite Chrome 21.0.injector service instantiation"/>
    <testcase name="should allow constructor to return different object" time="0.004" classname="jqlite Chrome 21.0.injector service instantiation"/>
    <testcase name="should handle constructor exception" time="0.001" classname="jqlite Chrome 21.0.injector service instantiation"/>
    <testcase name="should return instance if constructor returns non-object value" time="0.002" classname="jqlite Chrome 21.0.injector service instantiation"/>
    <testcase name="should prevent provider lookup in app" time="0.001" classname="jqlite Chrome 21.0.injector protection modes"/>
    <testcase name="should prevent provider configuration in app" time="0.002" classname="jqlite Chrome 21.0.injector protection modes"/>
    <testcase name="should prevent instance lookup in module" time="0.002" classname="jqlite Chrome 21.0.injector protection modes"/>
    <testcase name="should create the right structure" time="0.005" classname="jqlite Chrome 21.0.bootstrap tabbable"/>
    <testcase name="should respond to tab click" time="0.004" classname="jqlite Chrome 21.0.bootstrap tabbable"/>
    <testcase name="should select the first tab in repeater" time="0.005" classname="jqlite Chrome 21.0.bootstrap tabbable"/>
    <testcase name="should bind to model" time="0.005" classname="jqlite Chrome 21.0.bootstrap tabbable ngModel"/>
    <testcase name="should not overwrite the model" time="0.006" classname="jqlite Chrome 21.0.bootstrap tabbable ngModel"/>
    <testcase name="should default to an empty array" time="0.004" classname="jqlite Chrome 21.0.$http $httpProvider interceptors"/>
    <testcase name="should pass the responses through interceptors" time="0.002" classname="jqlite Chrome 21.0.$http $httpProvider interceptors"/>
    <testcase name="should support interceptors defined as services" time="0.006" classname="jqlite Chrome 21.0.$http $httpProvider interceptors"/>
    <testcase name="should do basic request" time="0.002" classname="jqlite Chrome 21.0.$http the instance"/>
    <testcase name="should pass data if specified" time="0.001" classname="jqlite Chrome 21.0.$http the instance"/>
    <testcase name="should do basic request with params and encode" time="0.002" classname="jqlite Chrome 21.0.$http the instance params"/>
    <testcase name="should merge params if url contains some already" time="0.002" classname="jqlite Chrome 21.0.$http the instance params"/>
    <testcase name="should jsonify objects in params map" time="0.001" classname="jqlite Chrome 21.0.$http the instance params"/>
    <testcase name="should pass in the response object when a request is successful" time="0.002" classname="jqlite Chrome 21.0.$http the instance callbacks"/>
    <testcase name="should pass in the response object when a request failed" time="0.002" classname="jqlite Chrome 21.0.$http the instance callbacks"/>
    <testcase name="should allow http specific callbacks to be registered via &quot;success&quot;" time="0.002" classname="jqlite Chrome 21.0.$http the instance callbacks success"/>
    <testcase name="should return the original http promise" time="0.001" classname="jqlite Chrome 21.0.$http the instance callbacks success"/>
    <testcase name="should allow http specific callbacks to be registered via &quot;error&quot;" time="0.002" classname="jqlite Chrome 21.0.$http the instance callbacks error"/>
    <testcase name="should return the original http promise" time="0.002" classname="jqlite Chrome 21.0.$http the instance callbacks error"/>
    <testcase name="should return single header" time="0.002" classname="jqlite Chrome 21.0.$http the instance response headers"/>
    <testcase name="should return null when single header does not exist" time="0.002" classname="jqlite Chrome 21.0.$http the instance response headers"/>
    <testcase name="should return all headers as object" time="0.002" classname="jqlite Chrome 21.0.$http the instance response headers"/>
    <testcase name="should return empty object for jsonp request" time="0.001" classname="jqlite Chrome 21.0.$http the instance response headers"/>
    <testcase name="should parse basic" time="0.001" classname="jqlite Chrome 21.0.$http the instance response headers parser"/>
    <testcase name="should parse lines without space after colon" time="0.002" classname="jqlite Chrome 21.0.$http the instance response headers parser"/>
    <testcase name="should trim the values" time="0.002" classname="jqlite Chrome 21.0.$http the instance response headers parser"/>
    <testcase name="should allow headers without value" time="0.002" classname="jqlite Chrome 21.0.$http the instance response headers parser"/>
    <testcase name="should merge headers with same key" time="0.002" classname="jqlite Chrome 21.0.$http the instance response headers parser"/>
    <testcase name="should normalize keys to lower case" time="0.002" classname="jqlite Chrome 21.0.$http the instance response headers parser"/>
    <testcase name="should parse CRLF as delimiter" time="0.002" classname="jqlite Chrome 21.0.$http the instance response headers parser"/>
    <testcase name="should parse tab after semi-colon" time="0.001" classname="jqlite Chrome 21.0.$http the instance response headers parser"/>
    <testcase name="should send custom headers" time="0.002" classname="jqlite Chrome 21.0.$http the instance request headers"/>
    <testcase name="should set default headers for GET request" time="0.002" classname="jqlite Chrome 21.0.$http the instance request headers"/>
    <testcase name="should set default headers for POST request" time="0.002" classname="jqlite Chrome 21.0.$http the instance request headers"/>
    <testcase name="should set default headers for PUT request" time="0.002" classname="jqlite Chrome 21.0.$http the instance request headers"/>
    <testcase name="should set default headers for custom HTTP method" time="0.015" classname="jqlite Chrome 21.0.$http the instance request headers"/>
    <testcase name="should override default headers with custom" time="0.002" classname="jqlite Chrome 21.0.$http the instance request headers"/>
    <testcase name="should not send Content-Type header if request data/body is undefined" time="0.002" classname="jqlite Chrome 21.0.$http the instance request headers"/>
    <testcase name="should set the XSRF cookie into a XSRF header" time="0.002" classname="jqlite Chrome 21.0.$http the instance request headers"/>
    <testcase name="should have get()" time="0.002" classname="jqlite Chrome 21.0.$http the instance short methods"/>
    <testcase name="get() should allow config param" time="0.001" classname="jqlite Chrome 21.0.$http the instance short methods"/>
    <testcase name="should have delete()" time="0.002" classname="jqlite Chrome 21.0.$http the instance short methods"/>
    <testcase name="delete() should allow config param" time="0.002" classname="jqlite Chrome 21.0.$http the instance short methods"/>
    <testcase name="should have head()" time="0.001" classname="jqlite Chrome 21.0.$http the instance short methods"/>
    <testcase name="head() should allow config param" time="0.002" classname="jqlite Chrome 21.0.$http the instance short methods"/>
    <testcase name="should have post()" time="0.001" classname="jqlite Chrome 21.0.$http the instance short methods"/>
    <testcase name="post() should allow config param" time="0.002" classname="jqlite Chrome 21.0.$http the instance short methods"/>
    <testcase name="should have put()" time="0.003" classname="jqlite Chrome 21.0.$http the instance short methods"/>
    <testcase name="put() should allow config param" time="0.001" classname="jqlite Chrome 21.0.$http the instance short methods"/>
    <testcase name="should have jsonp()" time="0.002" classname="jqlite Chrome 21.0.$http the instance short methods"/>
    <testcase name="jsonp() should allow config param" time="0.002" classname="jqlite Chrome 21.0.$http the instance short methods"/>
    <testcase name="should $apply after success callback" time="0.002" classname="jqlite Chrome 21.0.$http the instance scope.$apply"/>
    <testcase name="should $apply after error callback" time="0.002" classname="jqlite Chrome 21.0.$http the instance scope.$apply"/>
    <testcase name="should $apply even if exception thrown during callback" time="0.001" classname="jqlite Chrome 21.0.$http the instance scope.$apply"/>
    <testcase name="should transform object into json" time="0.001" classname="jqlite Chrome 21.0.$http the instance transformData request default"/>
    <testcase name="should ignore strings" time="0.002" classname="jqlite Chrome 21.0.$http the instance transformData request default"/>
    <testcase name="should ignore File objects" time="0.002" classname="jqlite Chrome 21.0.$http the instance transformData request default"/>
    <testcase name="should have access to request headers" time="0.002" classname="jqlite Chrome 21.0.$http the instance transformData request"/>
    <testcase name="should pipeline more functions" time="0.001" classname="jqlite Chrome 21.0.$http the instance transformData request"/>
    <testcase name="should deserialize json objects" time="0.002" classname="jqlite Chrome 21.0.$http the instance transformData response default"/>
    <testcase name="should deserialize json arrays" time="0.002" classname="jqlite Chrome 21.0.$http the instance transformData response default"/>
    <testcase name="should deserialize json with security prefix" time="0.002" classname="jqlite Chrome 21.0.$http the instance transformData response default"/>
    <testcase name="should deserialize json with security prefix &quot;)]}&apos;&quot;" time="0.001" classname="jqlite Chrome 21.0.$http the instance transformData response default"/>
    <testcase name="should not deserialize tpl beginning with ng expression" time="0.002" classname="jqlite Chrome 21.0.$http the instance transformData response default"/>
    <testcase name="should have access to response headers" time="0.002" classname="jqlite Chrome 21.0.$http the instance transformData response"/>
    <testcase name="should pipeline more functions" time="0.002" classname="jqlite Chrome 21.0.$http the instance transformData response"/>
    <testcase name="should cache GET request when cache is provided" time="0.002" classname="jqlite Chrome 21.0.$http the instance cache"/>
    <testcase name="should not cache when cache is not provided" time="0.002" classname="jqlite Chrome 21.0.$http the instance cache"/>
    <testcase name="should perform request when cache cleared" time="0.001" classname="jqlite Chrome 21.0.$http the instance cache"/>
    <testcase name="should always call callback asynchronously" time="0.002" classname="jqlite Chrome 21.0.$http the instance cache"/>
    <testcase name="should not cache POST request" time="0.002" classname="jqlite Chrome 21.0.$http the instance cache"/>
    <testcase name="should not cache PUT request" time="0.002" classname="jqlite Chrome 21.0.$http the instance cache"/>
    <testcase name="should not cache DELETE request" time="0.003" classname="jqlite Chrome 21.0.$http the instance cache"/>
    <testcase name="should not cache non 2xx responses" time="0.001" classname="jqlite Chrome 21.0.$http the instance cache"/>
    <testcase name="should cache the headers as well" time="0.002" classname="jqlite Chrome 21.0.$http the instance cache"/>
    <testcase name="should not share the cached headers object instance" time="0.002" classname="jqlite Chrome 21.0.$http the instance cache"/>
    <testcase name="should cache status code as well" time="0.002" classname="jqlite Chrome 21.0.$http the instance cache"/>
    <testcase name="should use cache even if second request was made before the first returned" time="0.002" classname="jqlite Chrome 21.0.$http the instance cache"/>
    <testcase name="should default to status code 200 and empty headers if cache contains a non-array element" time="0.002" classname="jqlite Chrome 21.0.$http the instance cache"/>
    <testcase name="should be an array of pending requests" time="0.002" classname="jqlite Chrome 21.0.$http the instance pendingRequests"/>
    <testcase name="should update pending requests even when served from cache" time="0.002" classname="jqlite Chrome 21.0.$http the instance pendingRequests"/>
    <testcase name="should remove the request before firing callbacks" time="0.002" classname="jqlite Chrome 21.0.$http the instance pendingRequests"/>
    <testcase name="should expose the defaults object at runtime" time="0.002" classname="jqlite Chrome 21.0.$http the instance defaults"/>
    <testcase name="should pass timeout, withCredentials and responseType" time="0.002" classname="jqlite Chrome 21.0.$http"/>
    <testcase name="should use withCredentials from default" time="0.002" classname="jqlite Chrome 21.0.$http"/>
    <testcase name="should provide common getters" time="0.001" classname="jqlite Chrome 21.0.$location NewUrl"/>
    <testcase name="path() should change path" time="0.001" classname="jqlite Chrome 21.0.$location NewUrl"/>
    <testcase name="search() should accept string" time="0" classname="jqlite Chrome 21.0.$location NewUrl"/>
    <testcase name="search() should accept object" time="0.001" classname="jqlite Chrome 21.0.$location NewUrl"/>
    <testcase name="search() should change single parameter" time="0" classname="jqlite Chrome 21.0.$location NewUrl"/>
    <testcase name="search() should remove single parameter" time="0.001" classname="jqlite Chrome 21.0.$location NewUrl"/>
    <testcase name="hash() should change hash fragment" time="0" classname="jqlite Chrome 21.0.$location NewUrl"/>
    <testcase name="url() should change the path, search and hash" time="0.001" classname="jqlite Chrome 21.0.$location NewUrl"/>
    <testcase name="url() should change only hash when no search and path specified" time="0.001" classname="jqlite Chrome 21.0.$location NewUrl"/>
    <testcase name="url() should change only search and hash when no path specified" time="0" classname="jqlite Chrome 21.0.$location NewUrl"/>
    <testcase name="url() should reset search and hash when only path specified" time="0.001" classname="jqlite Chrome 21.0.$location NewUrl"/>
    <testcase name="replace should set $$replace flag and return itself" time="0.001" classname="jqlite Chrome 21.0.$location NewUrl"/>
    <testcase name="should parse new url" time="0" classname="jqlite Chrome 21.0.$location NewUrl"/>
    <testcase name="should prefix path with forward-slash" time="0.001" classname="jqlite Chrome 21.0.$location NewUrl"/>
    <testcase name="should set path to forward-slash when empty" time="0" classname="jqlite Chrome 21.0.$location NewUrl"/>
    <testcase name="setters should return Url object to allow chaining" time="0.015" classname="jqlite Chrome 21.0.$location NewUrl"/>
    <testcase name="should not preserve old properties when parsing new url" time="0.001" classname="jqlite Chrome 21.0.$location NewUrl"/>
    <testcase name="should prepend path with basePath" time="0" classname="jqlite Chrome 21.0.$location NewUrl"/>
    <testcase name="should throw error when invalid url given" time="0.001" classname="jqlite Chrome 21.0.$location NewUrl"/>
    <testcase name="should encode special characters" time="0.001" classname="jqlite Chrome 21.0.$location NewUrl encoding"/>
    <testcase name="should not encode !$:@" time="0" classname="jqlite Chrome 21.0.$location NewUrl encoding"/>
    <testcase name="should decode special characters" time="0.001" classname="jqlite Chrome 21.0.$location NewUrl encoding"/>
    <testcase name="should parse hashband url into path and search" time="0.001" classname="jqlite Chrome 21.0.$location HashbangUrl"/>
    <testcase name="absUrl() should return hashbang url" time="0" classname="jqlite Chrome 21.0.$location HashbangUrl"/>
    <testcase name="should preserve query params in base" time="0.002" classname="jqlite Chrome 21.0.$location HashbangUrl"/>
    <testcase name="should prefix path with forward-slash" time="0.001" classname="jqlite Chrome 21.0.$location HashbangUrl"/>
    <testcase name="should set path to forward-slash when empty" time="0" classname="jqlite Chrome 21.0.$location HashbangUrl"/>
    <testcase name="should not preserve old properties when parsing new url" time="0.001" classname="jqlite Chrome 21.0.$location HashbangUrl"/>
    <testcase name="should throw error when invalid url given" time="0.001" classname="jqlite Chrome 21.0.$location HashbangUrl"/>
    <testcase name="should encode special characters" time="0.001" classname="jqlite Chrome 21.0.$location HashbangUrl encoding"/>
    <testcase name="should not encode !$:@" time="0.001" classname="jqlite Chrome 21.0.$location HashbangUrl encoding"/>
    <testcase name="should decode special characters" time="0.001" classname="jqlite Chrome 21.0.$location HashbangUrl encoding"/>
    <testcase name="should return decoded characters for search specified in URL" time="0" classname="jqlite Chrome 21.0.$location HashbangUrl encoding"/>
    <testcase name="should return decoded characters for search specified with setter" time="0.001" classname="jqlite Chrome 21.0.$location HashbangUrl encoding"/>
    <testcase name="should update $location when browser url changes" time="0.002" classname="jqlite Chrome 21.0.$location wiring"/>
    <testcase name="should not $apply when browser url changed inside $apply" time="0.002" classname="jqlite Chrome 21.0.$location wiring"/>
    <testcase name="should not $apply when browser url changed inside $digest" time="0.002" classname="jqlite Chrome 21.0.$location wiring"/>
    <testcase name="should update browser when $location changes" time="0.002" classname="jqlite Chrome 21.0.$location wiring"/>
    <testcase name="should update browser only once per $apply cycle" time="0.003" classname="jqlite Chrome 21.0.$location wiring"/>
    <testcase name="should replace browser url when url was replaced at least once" time="0.003" classname="jqlite Chrome 21.0.$location wiring"/>
    <testcase name="should update the browser if changed from within a watcher" time="0.002" classname="jqlite Chrome 21.0.$location wiring"/>
    <testcase name="should use hashbang url with hash prefix" time="0.002" classname="jqlite Chrome 21.0.$location disabled history"/>
    <testcase name="should use hashbang url without hash prefix" time="0.002" classname="jqlite Chrome 21.0.$location disabled history"/>
    <testcase name="should use hashbang url with hash prefix" time="0.002" classname="jqlite Chrome 21.0.$location history on old browser"/>
    <testcase name="should redirect to hashbang url when new url given" time="0.003" classname="jqlite Chrome 21.0.$location history on old browser"/>
    <testcase name="should use new url" time="0.015" classname="jqlite Chrome 21.0.$location history on new browser"/>
    <testcase name="should rewrite when hashbang url given" time="0.002" classname="jqlite Chrome 21.0.$location history on new browser"/>
    <testcase name="should rewrite when hashbang url given (without hash prefix)" time="0.001" classname="jqlite Chrome 21.0.$location history on new browser"/>
    <testcase name="should parse basic url" time="0" classname="jqlite Chrome 21.0.$location URL_MATCH"/>
    <testcase name="should parse file://" time="0.001" classname="jqlite Chrome 21.0.$location URL_MATCH"/>
    <testcase name="should parse url with &quot;-&quot; in host" time="0" classname="jqlite Chrome 21.0.$location URL_MATCH"/>
    <testcase name="should parse host without &quot;/&quot; at the end" time="0" classname="jqlite Chrome 21.0.$location URL_MATCH"/>
    <testcase name="should match with just &quot;/&quot; path" time="0" classname="jqlite Chrome 21.0.$location URL_MATCH"/>
    <testcase name="should parse chrome extension urls" time="0.001" classname="jqlite Chrome 21.0.$location URL_MATCH"/>
    <testcase name="should parse just path" time="0" classname="jqlite Chrome 21.0.$location PATH_MATCH"/>
    <testcase name="should parse path with search" time="0" classname="jqlite Chrome 21.0.$location PATH_MATCH"/>
    <testcase name="should parse path with hash" time="0" classname="jqlite Chrome 21.0.$location PATH_MATCH"/>
    <testcase name="should parse path with both search and hash" time="0.005" classname="jqlite Chrome 21.0.$location PATH_MATCH"/>
    <testcase name="should rewrite rel link to new url when history enabled on new browser" time="0.003" classname="jqlite Chrome 21.0.$location link rewriting"/>
    <testcase name="should rewrite abs link to new url when history enabled on new browser" time="0.002" classname="jqlite Chrome 21.0.$location link rewriting"/>
    <testcase name="should rewrite rel link to hashbang url when history enabled on old browser" time="0.002" classname="jqlite Chrome 21.0.$location link rewriting"/>
    <testcase name="should rewrite abs link to hashbang url when history enabled on old browser" time="0.001" classname="jqlite Chrome 21.0.$location link rewriting"/>
    <testcase name="should not rewrite full url links do different domain" time="0.002" classname="jqlite Chrome 21.0.$location link rewriting"/>
    <testcase name="should not rewrite links with target=&quot;_blank&quot;" time="0.002" classname="jqlite Chrome 21.0.$location link rewriting"/>
    <testcase name="should not rewrite links with target specified" time="0.001" classname="jqlite Chrome 21.0.$location link rewriting"/>
    <testcase name="should rewrite full url links to same domain and base path" time="0.002" classname="jqlite Chrome 21.0.$location link rewriting"/>
    <testcase name="should rewrite when clicked span inside link" time="0.002" classname="jqlite Chrome 21.0.$location link rewriting"/>
    <testcase name="should not rewrite when link to different base path when history enabled on new browser" time="0.001" classname="jqlite Chrome 21.0.$location link rewriting"/>
    <testcase name="should not rewrite when link to different base path when history enabled on old browser" time="0.002" classname="jqlite Chrome 21.0.$location link rewriting"/>
    <testcase name="should not rewrite when link to different base path when history disabled" time="0.002" classname="jqlite Chrome 21.0.$location link rewriting"/>
    <testcase name="should not rewrite when full link to different base path when history enabled on new browser" time="0.001" classname="jqlite Chrome 21.0.$location link rewriting"/>
    <testcase name="should not rewrite when full link to different base path when history enabled on old browser" time="0.002" classname="jqlite Chrome 21.0.$location link rewriting"/>
    <testcase name="should not rewrite when full link to different base path when history disabled" time="0.001" classname="jqlite Chrome 21.0.$location link rewriting"/>
    <testcase name="should not rewrite when clicked with ctrl pressed" time="0.002" classname="jqlite Chrome 21.0.$location link rewriting"/>
    <testcase name="should not rewrite when clicked with meta pressed" time="0.001" classname="jqlite Chrome 21.0.$location link rewriting"/>
    <testcase name="should not mess up hash urls when clicking on links in hashbang mode" time="0.003" classname="jqlite Chrome 21.0.$location link rewriting"/>
    <testcase name="should not mess up hash urls when clicking on links in hashbang mode with a prefix" time="0.003" classname="jqlite Chrome 21.0.$location link rewriting"/>
    <testcase name="should not intercept link clicks outside the app base url space" time="0.002" classname="jqlite Chrome 21.0.$location link rewriting"/>
    <testcase name="should not intercept hash link clicks outside the app base url space" time="0.001" classname="jqlite Chrome 21.0.$location link rewriting"/>
    <testcase name="should not throw if element was removed" time="0.002" classname="jqlite Chrome 21.0.$location link rewriting"/>
    <testcase name="should fire $before/afterLocationChange event" time="0.002" classname="jqlite Chrome 21.0.$location location cancellation"/>
    <testcase name="should allow $locationChangeStart event cancellation" time="0.001" classname="jqlite Chrome 21.0.$location location cancellation"/>
    <testcase name="should fire $locationChangeSuccess event when change from browser location bar" time="0.003" classname="jqlite Chrome 21.0.$location location cancellation"/>
    <testcase name="should listen on click events on href and prevent browser default in hashbang mode" time="0.002" classname="jqlite Chrome 21.0.$location location cancellation"/>
    <testcase name="should listen on click events on href and prevent browser default in html5 mode" time="0.002" classname="jqlite Chrome 21.0.$location location cancellation"/>
    <testcase name="should have locale id set to en-us" time="0.001" classname="jqlite Chrome 21.0.$locale"/>
    <testcase name="should have NUMBER_FORMATS" time="0" classname="jqlite Chrome 21.0.$locale"/>
    <testcase name="should have DATETIME_FORMATS" time="0" classname="jqlite Chrome 21.0.$locale"/>
    <testcase name="should return correct plural types" time="0.001" classname="jqlite Chrome 21.0.$locale"/>
    <testcase name="should be injected" time="0.001" classname="jqlite Chrome 21.0.$cacheFactory"/>
    <testcase name="should return a new cache whenever called" time="0.001" classname="jqlite Chrome 21.0.$cacheFactory"/>
    <testcase name="should complain if the cache id is being reused" time="0.001" classname="jqlite Chrome 21.0.$cacheFactory"/>
    <testcase name="should provide info about all created caches" time="0.001" classname="jqlite Chrome 21.0.$cacheFactory info"/>
    <testcase name="should return a cache if looked up by id" time="0.001" classname="jqlite Chrome 21.0.$cacheFactory get"/>
    <testcase name="should add cache entries via add and retrieve them via get" time="0.001" classname="jqlite Chrome 21.0.$cacheFactory cache put, get &amp; remove"/>
    <testcase name="should ignore put if the value is undefined" time="0.001" classname="jqlite Chrome 21.0.$cacheFactory cache put, get &amp; remove"/>
    <testcase name="should remove entries via remove" time="0.001" classname="jqlite Chrome 21.0.$cacheFactory cache put, get &amp; remove"/>
    <testcase name="should stringify keys" time="0.001" classname="jqlite Chrome 21.0.$cacheFactory cache put, get &amp; remove"/>
    <testcase name="should size increment with put and decrement with remove" time="0.002" classname="jqlite Chrome 21.0.$cacheFactory cache info"/>
    <testcase name="should return cache id" time="0.002" classname="jqlite Chrome 21.0.$cacheFactory cache info"/>
    <testcase name="should blow away all data" time="0.001" classname="jqlite Chrome 21.0.$cacheFactory cache removeAll"/>
    <testcase name="should make the cache unusable and remove references to it from $cacheFactory" time="0.001" classname="jqlite Chrome 21.0.$cacheFactory cache destroy"/>
    <testcase name="should create cache with defined capacity" time="0.001" classname="jqlite Chrome 21.0.$cacheFactory LRU cache"/>
    <testcase name="should kick out the first entry on put" time="0.001" classname="jqlite Chrome 21.0.$cacheFactory LRU cache eviction"/>
    <testcase name="should refresh an entry via get" time="0.001" classname="jqlite Chrome 21.0.$cacheFactory LRU cache eviction"/>
    <testcase name="should refresh an entry via put" time="0.001" classname="jqlite Chrome 21.0.$cacheFactory LRU cache eviction"/>
    <testcase name="should not purge an entry if another one was removed" time="0.002" classname="jqlite Chrome 21.0.$cacheFactory LRU cache eviction"/>
    <testcase name="should purge the next entry if the stalest one was removed" time="0.001" classname="jqlite Chrome 21.0.$cacheFactory LRU cache eviction"/>
    <testcase name="should correctly recreate the linked list if all cache entries were removed" time="0.001" classname="jqlite Chrome 21.0.$cacheFactory LRU cache eviction"/>
    <testcase name="should blow away the entire cache via removeAll and start evicting when full" time="0.001" classname="jqlite Chrome 21.0.$cacheFactory LRU cache eviction"/>
    <testcase name="should correctly refresh and evict items if operations are chained" time="0.002" classname="jqlite Chrome 21.0.$cacheFactory LRU cache eviction"/>
    <testcase name="should contain cookie cruncher" time="0.001" classname="jqlite Chrome 21.0.browser"/>
    <testcase name="should process callbacks immedietly with no outstanding requests" time="0" classname="jqlite Chrome 21.0.browser outstading requests"/>
    <testcase name="should execute fn asynchroniously via setTimeout" time="0" classname="jqlite Chrome 21.0.browser defer"/>
    <testcase name="should update outstandingRequests counter" time="0.001" classname="jqlite Chrome 21.0.browser defer"/>
    <testcase name="should return unique deferId" time="0" classname="jqlite Chrome 21.0.browser defer"/>
    <testcase name="should allow tasks to be canceled with returned deferId" time="0.001" classname="jqlite Chrome 21.0.browser defer cancel"/>
    <testcase name="should do nothing when no cookies are set" time="0.001" classname="jqlite Chrome 21.0.browser cookies remove all via (null)"/>
    <testcase name="should remove a cookie when it is present" time="0.002" classname="jqlite Chrome 21.0.browser cookies remove via cookies(cookieName, undefined)"/>
    <testcase name="should do nothing when an nonexisting cookie is being removed" time="0.001" classname="jqlite Chrome 21.0.browser cookies remove via cookies(cookieName, undefined)"/>
    <testcase name="should create and store a cookie" time="0.001" classname="jqlite Chrome 21.0.browser cookies put via cookies(cookieName, string)"/>
    <testcase name="should overwrite an existing unsynced cookie" time="0.002" classname="jqlite Chrome 21.0.browser cookies put via cookies(cookieName, string)"/>
    <testcase name="should escape both name and value" time="0.002" classname="jqlite Chrome 21.0.browser cookies put via cookies(cookieName, string)"/>
    <testcase name="should log warnings when 4kb per cookie storage limit is reached" time="0.003" classname="jqlite Chrome 21.0.browser cookies put via cookies(cookieName, string)"/>
    <testcase name="should log warnings when 20 cookies per domain storage limit is reached" time="0.004" classname="jqlite Chrome 21.0.browser cookies put via cookies(cookieName, string)"/>
    <testcase name="should return undefined for nonexistent cookie" time="0.001" classname="jqlite Chrome 21.0.browser cookies get via cookies()[cookieName]"/>
    <testcase name="should return a value for an existing cookie" time="0.002" classname="jqlite Chrome 21.0.browser cookies get via cookies()[cookieName]"/>
    <testcase name="should unescape cookie values that were escaped by puts" time="0.001" classname="jqlite Chrome 21.0.browser cookies get via cookies()[cookieName]"/>
    <testcase name="should preserve leading &amp; trailing spaces in names and values" time="0.002" classname="jqlite Chrome 21.0.browser cookies get via cookies()[cookieName]"/>
    <testcase name="should return cookies as hash" time="0.002" classname="jqlite Chrome 21.0.browser cookies getAll via cookies()"/>
    <testcase name="should return empty hash if no cookies exist" time="0.001" classname="jqlite Chrome 21.0.browser cookies getAll via cookies()"/>
    <testcase name="should pick up external changes made to browser cookies" time="0.002" classname="jqlite Chrome 21.0.browser cookies"/>
    <testcase name="should initialize cookie cache with existing cookies" time="0.002" classname="jqlite Chrome 21.0.browser cookies"/>
    <testcase name="should call functions in pollFns in regular intervals" time="0" classname="jqlite Chrome 21.0.browser poller"/>
    <testcase name="should startPoller" time="0" classname="jqlite Chrome 21.0.browser poller"/>
    <testcase name="should return fn that was passed into addPollFn" time="0" classname="jqlite Chrome 21.0.browser poller"/>
    <testcase name="should return current location.href" time="0" classname="jqlite Chrome 21.0.browser url"/>
    <testcase name="should use history.pushState when available" time="0" classname="jqlite Chrome 21.0.browser url"/>
    <testcase name="should use history.replaceState when available" time="0.001" classname="jqlite Chrome 21.0.browser url"/>
    <testcase name="should set location.href when pushState not available" time="0" classname="jqlite Chrome 21.0.browser url"/>
    <testcase name="should use location.replace when history.replaceState not available" time="0.001" classname="jqlite Chrome 21.0.browser url"/>
    <testcase name="should return $browser to allow chaining" time="0" classname="jqlite Chrome 21.0.browser url"/>
    <testcase name="should decode single quotes to work around FF bug 407273" time="0" classname="jqlite Chrome 21.0.browser url"/>
    <testcase name="should not set URL when the URL is already set" time="0.001" classname="jqlite Chrome 21.0.browser url"/>
    <testcase name="should return registered callback" time="0" classname="jqlite Chrome 21.0.browser urlChange"/>
    <testcase name="should forward popstate event with new url when history supported" time="0.001" classname="jqlite Chrome 21.0.browser urlChange"/>
    <testcase name="should forward only popstate event when both history and hashchange supported" time="0" classname="jqlite Chrome 21.0.browser urlChange"/>
    <testcase name="should forward hashchange event with new url when only hashchange supported" time="0" classname="jqlite Chrome 21.0.browser urlChange"/>
    <testcase name="should use polling when neither history nor hashchange supported" time="0" classname="jqlite Chrome 21.0.browser urlChange"/>
    <testcase name="should not fire urlChange if changed by browser.url method (polling)" time="0" classname="jqlite Chrome 21.0.browser urlChange"/>
    <testcase name="should not fire urlChange if changed by browser.url method (hashchange)" time="0.001" classname="jqlite Chrome 21.0.browser urlChange"/>
    <testcase name="should return value from &lt;base href&gt;" time="0" classname="jqlite Chrome 21.0.browser baseHref"/>
    <testcase name="should return undefined if no &lt;base href&gt;" time="0" classname="jqlite Chrome 21.0.browser baseHref"/>
    <testcase name="should remove domain from &lt;base href&gt;" time="0" classname="jqlite Chrome 21.0.browser baseHref"/>
    <testcase name="should log errors with single argument" time="0.001" classname="jqlite Chrome 21.0.$exceptionHandler"/>
    <testcase name="should log errors with multiple arguments" time="0.002" classname="jqlite Chrome 21.0.$exceptionHandler"/>
    <testcase name="should inject $document" time="0.001" classname="jqlite Chrome 21.0.$document"/>
    <testcase name="should register a directive" time="0.002" classname="jqlite Chrome 21.0.$compile configuration"/>
    <testcase name="should allow registration of multiple directives with same name" time="0.002" classname="jqlite Chrome 21.0.$compile configuration"/>
    <testcase name="should wrap root text nodes in spans" time="0.002" classname="jqlite Chrome 21.0.$compile compile phase"/>
    <testcase name="should allow multiple directives per element" time="0.002" classname="jqlite Chrome 21.0.$compile compile phase multiple directives per element"/>
    <testcase name="should recurse to children" time="0.011" classname="jqlite Chrome 21.0.$compile compile phase multiple directives per element"/>
    <testcase name="should allow directives in classes" time="0.002" classname="jqlite Chrome 21.0.$compile compile phase multiple directives per element"/>
    <testcase name="should ignore not set CSS classes on SVG elements" time="0.003" classname="jqlite Chrome 21.0.$compile compile phase multiple directives per element"/>
    <testcase name="should allow directives in comments" time="0.001" classname="jqlite Chrome 21.0.$compile compile phase multiple directives per element"/>
    <testcase name="should receive scope, element, and attributes" time="0.002" classname="jqlite Chrome 21.0.$compile compile phase multiple directives per element"/>
    <testcase name="should handle exceptions" time="0.002" classname="jqlite Chrome 21.0.$compile compile phase error handling"/>
    <testcase name="should allow changing the template structure after the current node" time="0.001" classname="jqlite Chrome 21.0.$compile compile phase error handling"/>
    <testcase name="should allow changing the template structure after the current node inside ngRepeat" time="0.002" classname="jqlite Chrome 21.0.$compile compile phase error handling"/>
    <testcase name="should honor priority" time="0.002" classname="jqlite Chrome 21.0.$compile compile phase compiler control priority"/>
    <testcase name="should prevent further directives from running" time="0.001" classname="jqlite Chrome 21.0.$compile compile phase compiler control terminal"/>
    <testcase name="should prevent further directives from running, but finish current priority level" time="0.002" classname="jqlite Chrome 21.0.$compile compile phase compiler control terminal"/>
    <testcase name="should allow restriction of attributes" time="0.003" classname="jqlite Chrome 21.0.$compile compile phase compiler control restrict"/>
    <testcase name="should replace element with template" time="0.002" classname="jqlite Chrome 21.0.$compile compile phase compiler control template"/>
    <testcase name="should append element with template" time="0.003" classname="jqlite Chrome 21.0.$compile compile phase compiler control template"/>
    <testcase name="should compile template when replacing" time="0.002" classname="jqlite Chrome 21.0.$compile compile phase compiler control template"/>
    <testcase name="should compile template when appending" time="0.002" classname="jqlite Chrome 21.0.$compile compile phase compiler control template"/>
    <testcase name="should merge attributes including style attr" time="0.002" classname="jqlite Chrome 21.0.$compile compile phase compiler control template"/>
    <testcase name="should prevent multiple templates per element" time="0.003" classname="jqlite Chrome 21.0.$compile compile phase compiler control template"/>
    <testcase name="should play nice with repeater when replacing" time="0.003" classname="jqlite Chrome 21.0.$compile compile phase compiler control template"/>
    <testcase name="should play nice with repeater when appending" time="0.003" classname="jqlite Chrome 21.0.$compile compile phase compiler control template"/>
    <testcase name="should handle interpolated css from replacing directive" time="0.002" classname="jqlite Chrome 21.0.$compile compile phase compiler control template"/>
    <testcase name="should merge interpolated css class" time="0.003" classname="jqlite Chrome 21.0.$compile compile phase compiler control template"/>
    <testcase name="should merge interpolated css class with ngRepeat" time="0.003" classname="jqlite Chrome 21.0.$compile compile phase compiler control template"/>
    <testcase name="should fail if replacing and template doesn&apos;t have a single root element" time="0.002" classname="jqlite Chrome 21.0.$compile compile phase compiler control template"/>
    <testcase name="should append template via $http and cache it in $templateCache" time="0.01" classname="jqlite Chrome 21.0.$compile compile phase compiler control templateUrl"/>
    <testcase name="should inline template via $http and cache it in $templateCache" time="0.007" classname="jqlite Chrome 21.0.$compile compile phase compiler control templateUrl"/>
    <testcase name="should compile, link and flush the template append" time="0.003" classname="jqlite Chrome 21.0.$compile compile phase compiler control templateUrl"/>
    <testcase name="should compile, link and flush the template inline" time="0.003" classname="jqlite Chrome 21.0.$compile compile phase compiler control templateUrl"/>
    <testcase name="should compile, flush and link the template append" time="0.004" classname="jqlite Chrome 21.0.$compile compile phase compiler control templateUrl"/>
    <testcase name="should compile, flush and link the template inline" time="0.003" classname="jqlite Chrome 21.0.$compile compile phase compiler control templateUrl"/>
    <testcase name="should resolve widgets after cloning in append mode" time="0.004" classname="jqlite Chrome 21.0.$compile compile phase compiler control templateUrl"/>
    <testcase name="should resolve widgets after cloning in inline mode" time="0.004" classname="jqlite Chrome 21.0.$compile compile phase compiler control templateUrl"/>
    <testcase name="should be implicitly terminal and not compile placeholder content in append" time="0.002" classname="jqlite Chrome 21.0.$compile compile phase compiler control templateUrl"/>
    <testcase name="should be implicitly terminal and not compile placeholder content in inline" time="0.002" classname="jqlite Chrome 21.0.$compile compile phase compiler control templateUrl"/>
    <testcase name="should throw an error and clear element content if the template fails to load" time="0.008" classname="jqlite Chrome 21.0.$compile compile phase compiler control templateUrl"/>
    <testcase name="should prevent multiple templates per element" time="0.002" classname="jqlite Chrome 21.0.$compile compile phase compiler control templateUrl"/>
    <testcase name="should flush after link append" time="0.015" classname="jqlite Chrome 21.0.$compile compile phase compiler control templateUrl delay compile / linking functions until after template is resolved"/>
    <testcase name="should flush after link inline" time="0.004" classname="jqlite Chrome 21.0.$compile compile phase compiler control templateUrl delay compile / linking functions until after template is resolved"/>
    <testcase name="should flush before link append" time="0.004" classname="jqlite Chrome 21.0.$compile compile phase compiler control templateUrl delay compile / linking functions until after template is resolved"/>
    <testcase name="should flush before link inline" time="0.004" classname="jqlite Chrome 21.0.$compile compile phase compiler control templateUrl delay compile / linking functions until after template is resolved"/>
    <testcase name="should allow multiple elements in template" time="0.002" classname="jqlite Chrome 21.0.$compile compile phase compiler control templateUrl"/>
    <testcase name="should work when directive is on the root element" time="0.004" classname="jqlite Chrome 21.0.$compile compile phase compiler control templateUrl"/>
    <testcase name="should work when directive is a repeater" time="0.005" classname="jqlite Chrome 21.0.$compile compile phase compiler control templateUrl"/>
    <testcase name="should fail if replacing and template doesn&apos;t have a single root element" time="0.003" classname="jqlite Chrome 21.0.$compile compile phase compiler control templateUrl"/>
    <testcase name="should allow creation of new scopes" time="0.003" classname="jqlite Chrome 21.0.$compile compile phase compiler control scope"/>
    <testcase name="should allow creation of new isolated scopes for directives" time="0.003" classname="jqlite Chrome 21.0.$compile compile phase compiler control scope"/>
    <testcase name="should allow creation of new scopes for directives with templates" time="0.003" classname="jqlite Chrome 21.0.$compile compile phase compiler control scope"/>
    <testcase name="should allow creation of new scopes for replace directives with templates" time="0.004" classname="jqlite Chrome 21.0.$compile compile phase compiler control scope"/>
    <testcase name="should allow creation of new scopes for replace directives with templates in a repeater" time="0.005" classname="jqlite Chrome 21.0.$compile compile phase compiler control scope"/>
    <testcase name="should allow creation of new isolated scopes for directives with templates" time="0.004" classname="jqlite Chrome 21.0.$compile compile phase compiler control scope"/>
    <testcase name="should correctly create the scope hierachy" time="0.003" classname="jqlite Chrome 21.0.$compile compile phase compiler control scope"/>
    <testcase name="should allow more one new scope directives per element, but directives should sharethe scope" time="0.002" classname="jqlite Chrome 21.0.$compile compile phase compiler control scope"/>
    <testcase name="should not allow more then one isolate scope creation per element" time="0.004" classname="jqlite Chrome 21.0.$compile compile phase compiler control scope"/>
    <testcase name="should not allow more then one isolate scope creation per element" time="0.002" classname="jqlite Chrome 21.0.$compile compile phase compiler control scope"/>
    <testcase name="should create new scope even at the root of the template" time="0.002" classname="jqlite Chrome 21.0.$compile compile phase compiler control scope"/>
    <testcase name="should create isolate scope even at the root of the template" time="0.003" classname="jqlite Chrome 21.0.$compile compile phase compiler control scope"/>
    <testcase name="should compile and link both attribute and text bindings" time="0.002" classname="jqlite Chrome 21.0.$compile interpolation"/>
    <testcase name="should decorate the binding with ng-binding and interpolation function" time="0.002" classname="jqlite Chrome 21.0.$compile interpolation"/>
    <testcase name="should observe interpolated attrs" time="0.003" classname="jqlite Chrome 21.0.$compile interpolation"/>
    <testcase name="should set interpolated attrs to undefined" time="0.002" classname="jqlite Chrome 21.0.$compile interpolation"/>
    <testcase name="should call observer of non-interpolated attr through $evalAsync" time="0.002" classname="jqlite Chrome 21.0.$compile interpolation"/>
    <testcase name="should delegate exceptions to $exceptionHandler" time="0.003" classname="jqlite Chrome 21.0.$compile interpolation"/>
    <testcase name="should translate {{}} in terminal nodes" time="0.005" classname="jqlite Chrome 21.0.$compile interpolation"/>
    <testcase name="should support custom start/end interpolation symbols in template and directive template" time="0.002" classname="jqlite Chrome 21.0.$compile interpolation"/>
    <testcase name="should support custom start/end interpolation symbols in async directive template" time="0.003" classname="jqlite Chrome 21.0.$compile interpolation"/>
    <testcase name="should not store linkingFns for noop branches" time="0.002" classname="jqlite Chrome 21.0.$compile link phase"/>
    <testcase name="should compile from top to bottom but link from bottom up" time="0.002" classname="jqlite Chrome 21.0.$compile link phase"/>
    <testcase name="should support link function on directive object" time="0.002" classname="jqlite Chrome 21.0.$compile link phase"/>
    <testcase name="should allow setting of attributes" time="0.001" classname="jqlite Chrome 21.0.$compile attrs"/>
    <testcase name="should read boolean attributes as boolean only on control elements" time="0.003" classname="jqlite Chrome 21.0.$compile attrs"/>
    <testcase name="should read boolean attributes as text on non-controll elements" time="0.002" classname="jqlite Chrome 21.0.$compile attrs"/>
    <testcase name="should allow setting of attributes" time="0.002" classname="jqlite Chrome 21.0.$compile attrs"/>
    <testcase name="should create new instance of attr for each template stamping" time="0.002" classname="jqlite Chrome 21.0.$compile attrs"/>
    <testcase name="should properly $observe inside ng-repeat" time="0.004" classname="jqlite Chrome 21.0.$compile attrs"/>
    <testcase name="should set attributes" time="0.015" classname="jqlite Chrome 21.0.$compile attrs $set"/>
    <testcase name="should allow overriding of attribute name and remember the name" time="0.002" classname="jqlite Chrome 21.0.$compile attrs $set"/>
    <testcase name="should remove attribute" time="0.002" classname="jqlite Chrome 21.0.$compile attrs $set"/>
    <testcase name="should not set DOM element attr if writeAttr false" time="0.003" classname="jqlite Chrome 21.0.$compile attrs $set"/>
    <testcase name="should copy simple attribute" time="0.002" classname="jqlite Chrome 21.0.$compile isolated locals attribute"/>
    <testcase name="should update when interpolated attribute updates" time="0.003" classname="jqlite Chrome 21.0.$compile isolated locals attribute"/>
    <testcase name="should update local when origin changes" time="0.002" classname="jqlite Chrome 21.0.$compile isolated locals object reference"/>
    <testcase name="should update local when origin changes" time="0.002" classname="jqlite Chrome 21.0.$compile isolated locals object reference"/>
    <testcase name="should update local when both change" time="0.003" classname="jqlite Chrome 21.0.$compile isolated locals object reference"/>
    <testcase name="should complain on non assignable changes" time="0.002" classname="jqlite Chrome 21.0.$compile isolated locals object reference"/>
    <testcase name="should allow expression execution with locals" time="0.004" classname="jqlite Chrome 21.0.$compile isolated locals executable expression"/>
    <testcase name="should throw on unknown definition" time="0.002" classname="jqlite Chrome 21.0.$compile isolated locals"/>
    <testcase name="should get required controller" time="0.003" classname="jqlite Chrome 21.0.$compile controller"/>
    <testcase name="should require controller on parent element" time="0.003" classname="jqlite Chrome 21.0.$compile controller"/>
    <testcase name="should have optional controller on current element" time="0.003" classname="jqlite Chrome 21.0.$compile controller"/>
    <testcase name="should support multiple controllers" time="0.002" classname="jqlite Chrome 21.0.$compile controller"/>
    <testcase name="should instantiate the controller just once when template/templateUrl" time="0.003" classname="jqlite Chrome 21.0.$compile controller"/>
    <testcase name="should compile get templateFn" time="0.005" classname="jqlite Chrome 21.0.$compile transclude"/>
    <testcase name="should support transclude directive" time="0.004" classname="jqlite Chrome 21.0.$compile transclude"/>
    <testcase name="should transclude transcluded content" time="0.004" classname="jqlite Chrome 21.0.$compile transclude"/>
    <testcase name="should only allow one transclude per element" time="0.002" classname="jqlite Chrome 21.0.$compile transclude"/>
    <testcase name="should remove transclusion scope, when the DOM is destroyed" time="0.005" classname="jqlite Chrome 21.0.$compile transclude"/>
    <testcase name="should support transcluded element on root content" time="0.003" classname="jqlite Chrome 21.0.$compile transclude"/>
    <testcase name="should allow registration of controllers" time="0.003" classname="jqlite Chrome 21.0.$controller provider"/>
    <testcase name="should allow registration of map of controllers" time="0.001" classname="jqlite Chrome 21.0.$controller provider"/>
    <testcase name="should allow registration of controllers annotated with arrays" time="0.001" classname="jqlite Chrome 21.0.$controller provider"/>
    <testcase name="should return instance of given controller class" time="0.001" classname="jqlite Chrome 21.0.$controller"/>
    <testcase name="should inject arguments" time="0.002" classname="jqlite Chrome 21.0.$controller"/>
    <testcase name="should inject given scope" time="0.001" classname="jqlite Chrome 21.0.$controller"/>
    <testcase name="should do basics - open async xhr and send data" time="0.002" classname="jqlite Chrome 21.0.$httpBackend"/>
    <testcase name="should normalize IE&apos;s 1223 status code into 204" time="0.002" classname="jqlite Chrome 21.0.$httpBackend"/>
    <testcase name="should set only the requested headers" time="0.001" classname="jqlite Chrome 21.0.$httpBackend"/>
    <testcase name="should abort request on timeout" time="0.002" classname="jqlite Chrome 21.0.$httpBackend"/>
    <testcase name="should register onreadystatechange callback before sending" time="0.002" classname="jqlite Chrome 21.0.$httpBackend"/>
    <testcase name="should set withCredentials" time="0.001" classname="jqlite Chrome 21.0.$httpBackend"/>
    <testcase name="should set responseType and return xhr.response" time="0.003" classname="jqlite Chrome 21.0.$httpBackend"/>
    <testcase name="should add script tag for JSONP request" time="0.001" classname="jqlite Chrome 21.0.$httpBackend JSONP"/>
    <testcase name="should clean up the callback and remove the script" time="0.002" classname="jqlite Chrome 21.0.$httpBackend JSONP"/>
    <testcase name="should call callback with status -2 when script fails to load" time="0.002" classname="jqlite Chrome 21.0.$httpBackend JSONP"/>
    <testcase name="should set url to current location if not specified or empty string" time="0.001" classname="jqlite Chrome 21.0.$httpBackend JSONP"/>
    <testcase name="should convert 0 to 200 if content" time="0.002" classname="jqlite Chrome 21.0.$httpBackend file protocol"/>
    <testcase name="should convert 0 to 200 if content - relative url" time="0.001" classname="jqlite Chrome 21.0.$httpBackend file protocol"/>
    <testcase name="should convert 0 to 404 if no content" time="0.001" classname="jqlite Chrome 21.0.$httpBackend file protocol"/>
    <testcase name="should convert 0 to 200 if content - relative url" time="0.006" classname="jqlite Chrome 21.0.$httpBackend file protocol"/>
    <testcase name="should return a function when there are no bindings and textOnly is undefined" time="0.002" classname="jqlite Chrome 21.0.$interpolate"/>
    <testcase name="should return undefined when there are no bindings and textOnly is set to true" time="0.001" classname="jqlite Chrome 21.0.$interpolate"/>
    <testcase name="should suppress falsy objects" time="0.003" classname="jqlite Chrome 21.0.$interpolate"/>
    <testcase name="should jsonify objects" time="0.002" classname="jqlite Chrome 21.0.$interpolate"/>
    <testcase name="should rethrow exceptions" time="0.002" classname="jqlite Chrome 21.0.$interpolate"/>
    <testcase name="should stop interpolation when encountering an exception" time="0.019" classname="jqlite Chrome 21.0.$interpolate"/>
    <testcase name="should return interpolation function" time="0.001" classname="jqlite Chrome 21.0.$interpolate"/>
    <testcase name="should ignore undefined model" time="0.001" classname="jqlite Chrome 21.0.$interpolate"/>
    <testcase name="should ignore undefined return value" time="0.001" classname="jqlite Chrome 21.0.$interpolate"/>
    <testcase name="should not get confused with same markers" time="0.002" classname="jqlite Chrome 21.0.$interpolate provider"/>
    <testcase name="should Parse Text With No Bindings" time="0.002" classname="jqlite Chrome 21.0.$interpolate parseBindings"/>
    <testcase name="should Parse Empty Text" time="0.001" classname="jqlite Chrome 21.0.$interpolate parseBindings"/>
    <testcase name="should Parse Inner Binding" time="0.002" classname="jqlite Chrome 21.0.$interpolate parseBindings"/>
    <testcase name="should Parse Ending Binding" time="0.001" classname="jqlite Chrome 21.0.$interpolate parseBindings"/>
    <testcase name="should Parse Begging Binding" time="0.001" classname="jqlite Chrome 21.0.$interpolate parseBindings"/>
    <testcase name="should Parse Loan Binding" time="0.003" classname="jqlite Chrome 21.0.$interpolate parseBindings"/>
    <testcase name="should Parse Two Bindings" time="0.002" classname="jqlite Chrome 21.0.$interpolate parseBindings"/>
    <testcase name="should Parse Two Bindings With Text In Middle" time="0.001" classname="jqlite Chrome 21.0.$interpolate parseBindings"/>
    <testcase name="should Parse Multiline" time="0.003" classname="jqlite Chrome 21.0.$interpolate parseBindings"/>
    <testcase name="should expose the startSymbol in config phase" time="0" classname="jqlite Chrome 21.0.$interpolate startSymbol"/>
    <testcase name="should expose the startSymbol in run phase" time="0.003" classname="jqlite Chrome 21.0.$interpolate startSymbol"/>
    <testcase name="should not get confused by matching start and end symbols" time="0.002" classname="jqlite Chrome 21.0.$interpolate startSymbol"/>
    <testcase name="should expose the endSymbol in config phase" time="0" classname="jqlite Chrome 21.0.$interpolate endSymbol"/>
    <testcase name="should expose the endSymbol in run phase" time="0.002" classname="jqlite Chrome 21.0.$interpolate endSymbol"/>
    <testcase name="should scroll to top of the window if empty hash" time="0.002" classname="jqlite Chrome 21.0.$anchorScroll"/>
    <testcase name="should not scroll if hash does not match any element" time="0.002" classname="jqlite Chrome 21.0.$anchorScroll"/>
    <testcase name="should scroll to anchor element with name" time="0.002" classname="jqlite Chrome 21.0.$anchorScroll"/>
    <testcase name="should not scroll to other than anchor element with name" time="0.002" classname="jqlite Chrome 21.0.$anchorScroll"/>
    <testcase name="should scroll to anchor even if other element with given name exist" time="0.003" classname="jqlite Chrome 21.0.$anchorScroll"/>
    <testcase name="should scroll to element with id with precedence over name" time="0.002" classname="jqlite Chrome 21.0.$anchorScroll"/>
    <testcase name="should scroll to top if hash == &quot;top&quot; and no matching element" time="0.001" classname="jqlite Chrome 21.0.$anchorScroll"/>
    <testcase name="should scroll to element with id &quot;top&quot; if present" time="0.001" classname="jqlite Chrome 21.0.$anchorScroll"/>
    <testcase name="should scroll to element when hash change in hashbang mode" time="0.003" classname="jqlite Chrome 21.0.$anchorScroll watcher"/>
    <testcase name="should scroll to element when hash change in html5 mode with no history api" time="0.003" classname="jqlite Chrome 21.0.$anchorScroll watcher"/>
    <testcase name="should not scroll when element does not exist" time="0.002" classname="jqlite Chrome 21.0.$anchorScroll watcher"/>
    <testcase name="should scroll when html5 mode with history api" time="0.002" classname="jqlite Chrome 21.0.$anchorScroll watcher"/>
    <testcase name="should not scroll when disabled" time="0.002" classname="jqlite Chrome 21.0.$anchorScroll watcher"/>
    <testcase name="should use console if present" time="0.002" classname="jqlite Chrome 21.0.$log"/>
    <testcase name="should use console.log() if other not present" time="0.001" classname="jqlite Chrome 21.0.$log"/>
    <testcase name="should use noop if no console" time="0.002" classname="jqlite Chrome 21.0.$log"/>
    <testcase name="should work in IE where console.error doesn&apos;t have apply method" time="0.001" classname="jqlite Chrome 21.0.$log"/>
    <testcase name="should pass error if does not have trace" time="0.001" classname="jqlite Chrome 21.0.$log $log.error"/>
    <testcase name="should print stack" time="0" classname="jqlite Chrome 21.0.$log $log.error"/>
    <testcase name="should print line" time="0" classname="jqlite Chrome 21.0.$log $log.error"/>
    <testcase name="should tokenize a string" time="0.001" classname="jqlite Chrome 21.0.parser lexer"/>
    <testcase name="should tokenize undefined" time="0.001" classname="jqlite Chrome 21.0.parser lexer"/>
    <testcase name="should tokenize quoted string" time="0" classname="jqlite Chrome 21.0.parser lexer"/>
    <testcase name="should tokenize escaped quoted string" time="0.001" classname="jqlite Chrome 21.0.parser lexer"/>
    <testcase name="should tokenize unicode" time="0" classname="jqlite Chrome 21.0.parser lexer"/>
    <testcase name="should ignore whitespace" time="0.001" classname="jqlite Chrome 21.0.parser lexer"/>
    <testcase name="should tokenize relation" time="0" classname="jqlite Chrome 21.0.parser lexer"/>
    <testcase name="should tokenize statements" time="0.001" classname="jqlite Chrome 21.0.parser lexer"/>
    <testcase name="should tokenize function invocation" time="0" classname="jqlite Chrome 21.0.parser lexer"/>
    <testcase name="should tokenize method invocation" time="0.001" classname="jqlite Chrome 21.0.parser lexer"/>
    <testcase name="should tokenize number" time="0" classname="jqlite Chrome 21.0.parser lexer"/>
    <testcase name="should tokenize negative number" time="0.002" classname="jqlite Chrome 21.0.parser lexer"/>
    <testcase name="should tokenize number with exponent" time="0.001" classname="jqlite Chrome 21.0.parser lexer"/>
    <testcase name="should throws exception for invalid exponent" time="0.001" classname="jqlite Chrome 21.0.parser lexer"/>
    <testcase name="should tokenize number starting with a dot" time="0" classname="jqlite Chrome 21.0.parser lexer"/>
    <testcase name="should throw error on invalid unicode" time="0" classname="jqlite Chrome 21.0.parser lexer"/>
    <testcase name="should parse expressions" time="0.002" classname="jqlite Chrome 21.0.parser csp true"/>
    <testcase name="should parse comparison" time="0.002" classname="jqlite Chrome 21.0.parser csp true"/>
    <testcase name="should parse logical" time="0.002" classname="jqlite Chrome 21.0.parser csp true"/>
    <testcase name="should parse string" time="0.002" classname="jqlite Chrome 21.0.parser csp true"/>
    <testcase name="should parse filters" time="0.002" classname="jqlite Chrome 21.0.parser csp true"/>
    <testcase name="should access scope" time="0.001" classname="jqlite Chrome 21.0.parser csp true"/>
    <testcase name="should resolve deeply nested paths (important for CSP mode)" time="0.001" classname="jqlite Chrome 21.0.parser csp true"/>
    <testcase name="should be forgiving" time="0.002" classname="jqlite Chrome 21.0.parser csp true"/>
    <testcase name="should support property names that collide with native object properties" time="0.002" classname="jqlite Chrome 21.0.parser csp true"/>
    <testcase name="should evaluate grouped expressions" time="0.001" classname="jqlite Chrome 21.0.parser csp true"/>
    <testcase name="should evaluate assignments" time="0.002" classname="jqlite Chrome 21.0.parser csp true"/>
    <testcase name="should evaluate function call without arguments" time="0.002" classname="jqlite Chrome 21.0.parser csp true"/>
    <testcase name="should evaluate function call with arguments" time="0.024" classname="jqlite Chrome 21.0.parser csp true"/>
    <testcase name="should evaluate function call from a return value" time="0.001" classname="jqlite Chrome 21.0.parser csp true"/>
    <testcase name="should evaluate multiplication and division" time="0.001" classname="jqlite Chrome 21.0.parser csp true"/>
    <testcase name="should evaluate array" time="0.001" classname="jqlite Chrome 21.0.parser csp true"/>
    <testcase name="should evaluate array access" time="0.001" classname="jqlite Chrome 21.0.parser csp true"/>
    <testcase name="should evaluate object" time="0.001" classname="jqlite Chrome 21.0.parser csp true"/>
    <testcase name="should evaluate object access" time="0.001" classname="jqlite Chrome 21.0.parser csp true"/>
    <testcase name="should evaluate JSON" time="0.002" classname="jqlite Chrome 21.0.parser csp true"/>
    <testcase name="should evaluate multiple statements" time="0.001" classname="jqlite Chrome 21.0.parser csp true"/>
    <testcase name="should evaluate object methods in correct context (this)" time="0.003" classname="jqlite Chrome 21.0.parser csp true"/>
    <testcase name="should evaluate methods in correct context (this) in argument" time="0.001" classname="jqlite Chrome 21.0.parser csp true"/>
    <testcase name="should evaluate objects on scope context" time="0.001" classname="jqlite Chrome 21.0.parser csp true"/>
    <testcase name="should evaluate field access on function call result" time="0.001" classname="jqlite Chrome 21.0.parser csp true"/>
    <testcase name="should evaluate field access after array access" time="0.001" classname="jqlite Chrome 21.0.parser csp true"/>
    <testcase name="should evaluate array assignment" time="0.002" classname="jqlite Chrome 21.0.parser csp true"/>
    <testcase name="should evaluate grouped filters" time="0.001" classname="jqlite Chrome 21.0.parser csp true"/>
    <testcase name="should evaluate remainder" time="0.001" classname="jqlite Chrome 21.0.parser csp true"/>
    <testcase name="should evaluate sum with undefined" time="0.001" classname="jqlite Chrome 21.0.parser csp true"/>
    <testcase name="should throw exception on non-closed bracket" time="0.001" classname="jqlite Chrome 21.0.parser csp true"/>
    <testcase name="should evaluate double negation" time="0.002" classname="jqlite Chrome 21.0.parser csp true"/>
    <testcase name="should evaluate negation" time="0.001" classname="jqlite Chrome 21.0.parser csp true"/>
    <testcase name="should evaluate exclamation mark" time="0.001" classname="jqlite Chrome 21.0.parser csp true"/>
    <testcase name="should evaluate minus" time="0.001" classname="jqlite Chrome 21.0.parser csp true"/>
    <testcase name="should evaluate undefined" time="0.001" classname="jqlite Chrome 21.0.parser csp true"/>
    <testcase name="should allow assignment after array dereference" time="0.001" classname="jqlite Chrome 21.0.parser csp true"/>
    <testcase name="should short-circuit AND operator" time="0.001" classname="jqlite Chrome 21.0.parser csp true"/>
    <testcase name="should short-circuit OR operator" time="0.002" classname="jqlite Chrome 21.0.parser csp true"/>
    <testcase name="should support method calls on primitive types" time="0.001" classname="jqlite Chrome 21.0.parser csp true"/>
    <testcase name="should evaluated resolved promise and get its value" time="0.001" classname="jqlite Chrome 21.0.parser csp true promises {{promise}}"/>
    <testcase name="should evaluated rejected promise and ignore the rejection reason" time="0.002" classname="jqlite Chrome 21.0.parser csp true promises {{promise}}"/>
    <testcase name="should evaluate a promise and eventualy get its value" time="0.001" classname="jqlite Chrome 21.0.parser csp true promises {{promise}}"/>
    <testcase name="should evaluate a promise and eventualy ignore its rejection" time="0.001" classname="jqlite Chrome 21.0.parser csp true promises {{promise}}"/>
    <testcase name="should evaluate and dereference properties leading to and from a promise" time="0.001" classname="jqlite Chrome 21.0.parser csp true promises dereferencing"/>
    <testcase name="should evaluate and dereference properties leading to and from a promise via bracket notation" time="0.001" classname="jqlite Chrome 21.0.parser csp true promises dereferencing"/>
    <testcase name="should evaluate and dereference array references leading to and from a promise" time="0.001" classname="jqlite Chrome 21.0.parser csp true promises dereferencing"/>
    <testcase name="should evaluate and dereference promises used as function arguments" time="0.001" classname="jqlite Chrome 21.0.parser csp true promises dereferencing"/>
    <testcase name="should evaluate and dereference promises used as array indexes" time="0.001" classname="jqlite Chrome 21.0.parser csp true promises dereferencing"/>
    <testcase name="should evaluate and dereference promises used as keys in bracket notation" time="0.002" classname="jqlite Chrome 21.0.parser csp true promises dereferencing"/>
    <testcase name="should not mess with the promise if it was not directly evaluated" time="0.001" classname="jqlite Chrome 21.0.parser csp true promises dereferencing"/>
    <testcase name="should expose assignment function" time="0.002" classname="jqlite Chrome 21.0.parser csp true assignable"/>
    <testcase name="should expose local variables" time="0.001" classname="jqlite Chrome 21.0.parser csp true locals"/>
    <testcase name="should expose traverse locals" time="0.001" classname="jqlite Chrome 21.0.parser csp true locals"/>
    <testcase name="should parse expressions" time="0.002" classname="jqlite Chrome 21.0.parser csp false"/>
    <testcase name="should parse comparison" time="0.001" classname="jqlite Chrome 21.0.parser csp false"/>
    <testcase name="should parse logical" time="0.001" classname="jqlite Chrome 21.0.parser csp false"/>
    <testcase name="should parse string" time="0.001" classname="jqlite Chrome 21.0.parser csp false"/>
    <testcase name="should parse filters" time="0.002" classname="jqlite Chrome 21.0.parser csp false"/>
    <testcase name="should access scope" time="0.002" classname="jqlite Chrome 21.0.parser csp false"/>
    <testcase name="should resolve deeply nested paths (important for CSP mode)" time="0.001" classname="jqlite Chrome 21.0.parser csp false"/>
    <testcase name="should be forgiving" time="0.002" classname="jqlite Chrome 21.0.parser csp false"/>
    <testcase name="should support property names that collide with native object properties" time="0.002" classname="jqlite Chrome 21.0.parser csp false"/>
    <testcase name="should evaluate grouped expressions" time="0.001" classname="jqlite Chrome 21.0.parser csp false"/>
    <testcase name="should evaluate assignments" time="0.001" classname="jqlite Chrome 21.0.parser csp false"/>
    <testcase name="should evaluate function call without arguments" time="0.001" classname="jqlite Chrome 21.0.parser csp false"/>
    <testcase name="should evaluate function call with arguments" time="0.002" classname="jqlite Chrome 21.0.parser csp false"/>
    <testcase name="should evaluate function call from a return value" time="0.001" classname="jqlite Chrome 21.0.parser csp false"/>
    <testcase name="should evaluate multiplication and division" time="0.001" classname="jqlite Chrome 21.0.parser csp false"/>
    <testcase name="should evaluate array" time="0.001" classname="jqlite Chrome 21.0.parser csp false"/>
    <testcase name="should evaluate array access" time="0.001" classname="jqlite Chrome 21.0.parser csp false"/>
    <testcase name="should evaluate object" time="0.002" classname="jqlite Chrome 21.0.parser csp false"/>
    <testcase name="should evaluate object access" time="0.001" classname="jqlite Chrome 21.0.parser csp false"/>
    <testcase name="should evaluate JSON" time="0.001" classname="jqlite Chrome 21.0.parser csp false"/>
    <testcase name="should evaluate multiple statements" time="0.002" classname="jqlite Chrome 21.0.parser csp false"/>
    <testcase name="should evaluate object methods in correct context (this)" time="0.001" classname="jqlite Chrome 21.0.parser csp false"/>
    <testcase name="should evaluate methods in correct context (this) in argument" time="0.002" classname="jqlite Chrome 21.0.parser csp false"/>
    <testcase name="should evaluate objects on scope context" time="0.001" classname="jqlite Chrome 21.0.parser csp false"/>
    <testcase name="should evaluate field access on function call result" time="0.001" classname="jqlite Chrome 21.0.parser csp false"/>
    <testcase name="should evaluate field access after array access" time="0.001" classname="jqlite Chrome 21.0.parser csp false"/>
    <testcase name="should evaluate array assignment" time="0.002" classname="jqlite Chrome 21.0.parser csp false"/>
    <testcase name="should evaluate grouped filters" time="0.001" classname="jqlite Chrome 21.0.parser csp false"/>
    <testcase name="should evaluate remainder" time="0.001" classname="jqlite Chrome 21.0.parser csp false"/>
    <testcase name="should evaluate sum with undefined" time="0.001" classname="jqlite Chrome 21.0.parser csp false"/>
    <testcase name="should throw exception on non-closed bracket" time="0.006" classname="jqlite Chrome 21.0.parser csp false"/>
    <testcase name="should evaluate double negation" time="0.002" classname="jqlite Chrome 21.0.parser csp false"/>
    <testcase name="should evaluate negation" time="0.002" classname="jqlite Chrome 21.0.parser csp false"/>
    <testcase name="should evaluate exclamation mark" time="0.001" classname="jqlite Chrome 21.0.parser csp false"/>
    <testcase name="should evaluate minus" time="0.001" classname="jqlite Chrome 21.0.parser csp false"/>
    <testcase name="should evaluate undefined" time="0.002" classname="jqlite Chrome 21.0.parser csp false"/>
    <testcase name="should allow assignment after array dereference" time="0.001" classname="jqlite Chrome 21.0.parser csp false"/>
    <testcase name="should short-circuit AND operator" time="0.001" classname="jqlite Chrome 21.0.parser csp false"/>
    <testcase name="should short-circuit OR operator" time="0.001" classname="jqlite Chrome 21.0.parser csp false"/>
    <testcase name="should support method calls on primitive types" time="0.002" classname="jqlite Chrome 21.0.parser csp false"/>
    <testcase name="should evaluated resolved promise and get its value" time="0.012" classname="jqlite Chrome 21.0.parser csp false promises {{promise}}"/>
    <testcase name="should evaluated rejected promise and ignore the rejection reason" time="0.001" classname="jqlite Chrome 21.0.parser csp false promises {{promise}}"/>
    <testcase name="should evaluate a promise and eventualy get its value" time="0.001" classname="jqlite Chrome 21.0.parser csp false promises {{promise}}"/>
    <testcase name="should evaluate a promise and eventualy ignore its rejection" time="0.002" classname="jqlite Chrome 21.0.parser csp false promises {{promise}}"/>
    <testcase name="should evaluate and dereference properties leading to and from a promise" time="0.002" classname="jqlite Chrome 21.0.parser csp false promises dereferencing"/>
    <testcase name="should evaluate and dereference properties leading to and from a promise via bracket notation" time="0.002" classname="jqlite Chrome 21.0.parser csp false promises dereferencing"/>
    <testcase name="should evaluate and dereference array references leading to and from a promise" time="0.001" classname="jqlite Chrome 21.0.parser csp false promises dereferencing"/>
    <testcase name="should evaluate and dereference promises used as function arguments" time="0.001" classname="jqlite Chrome 21.0.parser csp false promises dereferencing"/>
    <testcase name="should evaluate and dereference promises used as array indexes" time="0.002" classname="jqlite Chrome 21.0.parser csp false promises dereferencing"/>
    <testcase name="should evaluate and dereference promises used as keys in bracket notation" time="0.001" classname="jqlite Chrome 21.0.parser csp false promises dereferencing"/>
    <testcase name="should not mess with the promise if it was not directly evaluated" time="0.001" classname="jqlite Chrome 21.0.parser csp false promises dereferencing"/>
    <testcase name="should expose assignment function" time="0.002" classname="jqlite Chrome 21.0.parser csp false assignable"/>
    <testcase name="should expose local variables" time="0.001" classname="jqlite Chrome 21.0.parser csp false locals"/>
    <testcase name="should expose traverse locals" time="0.001" classname="jqlite Chrome 21.0.parser csp false locals"/>
    <testcase name="should create a new deferred" time="0" classname="jqlite Chrome 21.0.q defer"/>
    <testcase name="should fulfill the promise and execute all success callbacks in the registration order" time="0.001" classname="jqlite Chrome 21.0.q defer resolve"/>
    <testcase name="should do nothing if a promise was previously resolved" time="0" classname="jqlite Chrome 21.0.q defer resolve"/>
    <testcase name="should do nothing if a promise was previously rejected" time="0.001" classname="jqlite Chrome 21.0.q defer resolve"/>
    <testcase name="should allow deferred resolution with a new promise" time="0" classname="jqlite Chrome 21.0.q defer resolve"/>
    <testcase name="should call the callback in the next turn" time="0" classname="jqlite Chrome 21.0.q defer resolve"/>
    <testcase name="should support non-bound execution" time="0" classname="jqlite Chrome 21.0.q defer resolve"/>
    <testcase name="should not break if a callbacks registers another callback" time="0" classname="jqlite Chrome 21.0.q defer resolve"/>
    <testcase name="should not break if a callbacks tries to resolve the deferred again" time="0" classname="jqlite Chrome 21.0.q defer resolve"/>
    <testcase name="should reject the promise and execute all error callbacks in the registration order" time="0" classname="jqlite Chrome 21.0.q defer reject"/>
    <testcase name="should do nothing if a promise was previously resolved" time="0.001" classname="jqlite Chrome 21.0.q defer reject"/>
    <testcase name="should do nothing if a promise was previously rejected" time="0" classname="jqlite Chrome 21.0.q defer reject"/>
    <testcase name="should not defer rejection with a new promise" time="0" classname="jqlite Chrome 21.0.q defer reject"/>
    <testcase name="should call the error callback in the next turn" time="0.001" classname="jqlite Chrome 21.0.q defer reject"/>
    <testcase name="should support non-bound execution" time="0.001" classname="jqlite Chrome 21.0.q defer reject"/>
    <testcase name="should have a then method" time="0" classname="jqlite Chrome 21.0.q defer promise"/>
    <testcase name="should allow registration of a success callback without an errback and resolve" time="0" classname="jqlite Chrome 21.0.q defer promise then"/>
    <testcase name="should allow registration of a success callback without an errback and reject" time="0" classname="jqlite Chrome 21.0.q defer promise then"/>
    <testcase name="should allow registration of an errback without a success callback and reject" time="0" classname="jqlite Chrome 21.0.q defer promise then"/>
    <testcase name="should allow registration of an errback without a success callback and resolve" time="0" classname="jqlite Chrome 21.0.q defer promise then"/>
    <testcase name="should resolve all callbacks with the original value" time="0.001" classname="jqlite Chrome 21.0.q defer promise then"/>
    <testcase name="should reject all callbacks with the original reason" time="0" classname="jqlite Chrome 21.0.q defer promise then"/>
    <testcase name="should propagate resolution and rejection between dependent promises" time="0.001" classname="jqlite Chrome 21.0.q defer promise then"/>
    <testcase name="should reject a derived promise if an exception is thrown while resolving its parent" time="0" classname="jqlite Chrome 21.0.q defer promise then"/>
    <testcase name="should reject a derived promise if an exception is thrown while rejecting its parent" time="0" classname="jqlite Chrome 21.0.q defer promise then"/>
    <testcase name="should call success callback in the next turn even if promise is already resolved" time="0" classname="jqlite Chrome 21.0.q defer promise then"/>
    <testcase name="should call errpr callback in the next turn even if promise is already rejected" time="0.001" classname="jqlite Chrome 21.0.q defer promise then"/>
    <testcase name="should package a string into a rejected promise" time="0" classname="jqlite Chrome 21.0.q reject"/>
    <testcase name="should package an exception into a rejected promise" time="0" classname="jqlite Chrome 21.0.q reject"/>
    <testcase name="should return a promise that forwards callbacks if the callbacks are missing" time="0.001" classname="jqlite Chrome 21.0.q reject"/>
    <testcase name="should call the success callback in the next turn when the value is a non-promise" time="0" classname="jqlite Chrome 21.0.q when resolution"/>
    <testcase name="should call the success callback in the next turn when the value is a resolved promise" time="0" classname="jqlite Chrome 21.0.q when resolution"/>
    <testcase name="should call the errback in the next turn when the value is a rejected promise" time="0" classname="jqlite Chrome 21.0.q when resolution"/>
    <testcase name="should call the success callback after the original promise is resolved" time="0" classname="jqlite Chrome 21.0.q when resolution"/>
    <testcase name="should call the errback after the orignal promise is rejected" time="0" classname="jqlite Chrome 21.0.q when resolution"/>
    <testcase name="should not require success callback and propagate resolution" time="0.001" classname="jqlite Chrome 21.0.q when optional callbacks"/>
    <testcase name="should not require success callback and propagate rejection" time="0" classname="jqlite Chrome 21.0.q when optional callbacks"/>
    <testcase name="should not require errback and propagate resolution" time="0" classname="jqlite Chrome 21.0.q when optional callbacks"/>
    <testcase name="should not require errback and propagate rejection" time="0" classname="jqlite Chrome 21.0.q when optional callbacks"/>
    <testcase name="should return a promise that can be resolved with a value returned from the success callback" time="0.001" classname="jqlite Chrome 21.0.q when returned promise"/>
    <testcase name="should return a promise that can be rejected with a rejected promise returned from the success callback" time="0" classname="jqlite Chrome 21.0.q when returned promise"/>
    <testcase name="should return a promise that can be resolved with a value returned from the errback" time="0" classname="jqlite Chrome 21.0.q when returned promise"/>
    <testcase name="should return a promise that can be rejected with a rejected promise returned from the errback" time="0.001" classname="jqlite Chrome 21.0.q when returned promise"/>
    <testcase name="should return a promise that can be resolved with a promise returned from the success callback" time="0" classname="jqlite Chrome 21.0.q when returned promise"/>
    <testcase name="should return a promise that can be resolved with promise returned from the errback callback" time="0" classname="jqlite Chrome 21.0.q when returned promise"/>
    <testcase name="should call success callback only once even if the original promise gets fullfilled multiple times" time="0.001" classname="jqlite Chrome 21.0.q when security"/>
    <testcase name="should call errback only once even if the original promise gets fullfilled multiple times" time="0" classname="jqlite Chrome 21.0.q when security"/>
    <testcase name="should resolve all of nothing" time="0" classname="jqlite Chrome 21.0.q all"/>
    <testcase name="should take an array of promises and return a promise for an array of results" time="0.001" classname="jqlite Chrome 21.0.q all"/>
    <testcase name="should reject the derived promise if at least one of the promises in the array is rejected" time="0" classname="jqlite Chrome 21.0.q all"/>
    <testcase name="should ignore multiple resolutions of an (evil) array promise" time="0" classname="jqlite Chrome 21.0.q all"/>
    <testcase name="should log exceptions thrown in a success callback and reject the derived promise" time="0.001" classname="jqlite Chrome 21.0.q exception logging in then"/>
    <testcase name="should NOT log exceptions when a success callback returns rejected promise" time="0" classname="jqlite Chrome 21.0.q exception logging in then"/>
    <testcase name="should log exceptions thrown in a errback and reject the derived promise" time="0" classname="jqlite Chrome 21.0.q exception logging in then"/>
    <testcase name="should NOT log exceptions when an errback returns a rejected promise" time="0" classname="jqlite Chrome 21.0.q exception logging in then"/>
    <testcase name="should log exceptions thrown in a success callback and reject the derived promise" time="0" classname="jqlite Chrome 21.0.q exception logging in when"/>
    <testcase name="should NOT log exceptions when a success callback returns rejected promise" time="0" classname="jqlite Chrome 21.0.q exception logging in when"/>
    <testcase name="should log exceptions thrown in a errback and reject the derived promise" time="0" classname="jqlite Chrome 21.0.q exception logging in when"/>
    <testcase name="should NOT log exceptions when an errback returns a rejected promise" time="0.001" classname="jqlite Chrome 21.0.q exception logging in when"/>
    <testcase name="should publish the bootstrap element into $rootElement" time="0.001" classname="jqlite Chrome 21.0.$rootElement"/>
    <testcase name="should point to itself" time="0.001" classname="jqlite Chrome 21.0.Scope $root"/>
    <testcase name="should not have $root on children, but should inherit" time="0.002" classname="jqlite Chrome 21.0.Scope $root"/>
    <testcase name="should point to itself in root" time="0.001" classname="jqlite Chrome 21.0.Scope $parent"/>
    <testcase name="should point to parent" time="0.001" classname="jqlite Chrome 21.0.Scope $parent"/>
    <testcase name="should have a unique id" time="0.001" classname="jqlite Chrome 21.0.Scope $id"/>
    <testcase name="should have a &apos;this&apos;" time="0.002" classname="jqlite Chrome 21.0.Scope this"/>
    <testcase name="should create a child scope" time="0.001" classname="jqlite Chrome 21.0.Scope $new()"/>
    <testcase name="should create a non prototypically inherited child scope" time="0.001" classname="jqlite Chrome 21.0.Scope $new()"/>
    <testcase name="should watch and fire on simple property change" time="0.001" classname="jqlite Chrome 21.0.Scope $watch/$digest"/>
    <testcase name="should watch and fire on expression change" time="0.002" classname="jqlite Chrome 21.0.Scope $watch/$digest"/>
    <testcase name="should delegate exceptions" time="0.001" classname="jqlite Chrome 21.0.Scope $watch/$digest"/>
    <testcase name="should fire watches in order of addition" time="0.003" classname="jqlite Chrome 21.0.Scope $watch/$digest"/>
    <testcase name="should call child $watchers in addition order" time="0.002" classname="jqlite Chrome 21.0.Scope $watch/$digest"/>
    <testcase name="should allow $digest on a child scope with and without a right sibling" time="0.001" classname="jqlite Chrome 21.0.Scope $watch/$digest"/>
    <testcase name="should repeat watch cycle while model changes are identified" time="0.002" classname="jqlite Chrome 21.0.Scope $watch/$digest"/>
    <testcase name="should repeat watch cycle from the root element" time="0.001" classname="jqlite Chrome 21.0.Scope $watch/$digest"/>
    <testcase name="should prevent infinite recursion and print watcher expression" time="0.003" classname="jqlite Chrome 21.0.Scope $watch/$digest"/>
    <testcase name="should prevent infinite recursion and print print watcher function name or body" time="0.002" classname="jqlite Chrome 21.0.Scope $watch/$digest"/>
    <testcase name="should not fire upon $watch registration on initial $digest" time="0.001" classname="jqlite Chrome 21.0.Scope $watch/$digest"/>
    <testcase name="should watch objects" time="0.001" classname="jqlite Chrome 21.0.Scope $watch/$digest"/>
    <testcase name="should watch functions" time="0.002" classname="jqlite Chrome 21.0.Scope $watch/$digest"/>
    <testcase name="should prevent $digest recursion" time="0.001" classname="jqlite Chrome 21.0.Scope $watch/$digest"/>
    <testcase name="should return a function that allows listeners to be unregistered" time="0.001" classname="jqlite Chrome 21.0.Scope $watch/$digest"/>
    <testcase name="should not infinitely digest when current value is NaN" time="0.002" classname="jqlite Chrome 21.0.Scope $watch/$digest"/>
    <testcase name="should always call the watchr with newVal and oldVal equal on the first run" time="0.001" classname="jqlite Chrome 21.0.Scope $watch/$digest"/>
    <testcase name="should ignore remove on root" time="0.002" classname="jqlite Chrome 21.0.Scope $destroy"/>
    <testcase name="should remove first" time="0.002" classname="jqlite Chrome 21.0.Scope $destroy"/>
    <testcase name="should remove middle" time="0.001" classname="jqlite Chrome 21.0.Scope $destroy"/>
    <testcase name="should remove last" time="0.001" classname="jqlite Chrome 21.0.Scope $destroy"/>
    <testcase name="should broadcast the $destroy event" time="0.001" classname="jqlite Chrome 21.0.Scope $destroy"/>
    <testcase name="should eval an expression" time="0.002" classname="jqlite Chrome 21.0.Scope $eval"/>
    <testcase name="should allow passing locals to the expression" time="0.001" classname="jqlite Chrome 21.0.Scope $eval"/>
    <testcase name="should run callback before $watch" time="0.001" classname="jqlite Chrome 21.0.Scope $evalAsync"/>
    <testcase name="should cause a $digest rerun" time="0.013" classname="jqlite Chrome 21.0.Scope $evalAsync"/>
    <testcase name="should run async in the same order as added" time="0.002" classname="jqlite Chrome 21.0.Scope $evalAsync"/>
    <testcase name="should apply expression with full lifecycle" time="0.002" classname="jqlite Chrome 21.0.Scope $apply"/>
    <testcase name="should catch exceptions" time="0.001" classname="jqlite Chrome 21.0.Scope $apply"/>
    <testcase name="should log exceptions from $digest" time="0.003" classname="jqlite Chrome 21.0.Scope $apply"/>
    <testcase name="should execute and return value and update" time="0.001" classname="jqlite Chrome 21.0.Scope $apply exceptions"/>
    <testcase name="should catch exception and update" time="0.002" classname="jqlite Chrome 21.0.Scope $apply exceptions"/>
    <testcase name="should throw an exception if $apply is called while an $apply is in progress" time="0.001" classname="jqlite Chrome 21.0.Scope $apply recursive $apply protection"/>
    <testcase name="should throw an exception if $apply is called while flushing evalAsync queue" time="0.002" classname="jqlite Chrome 21.0.Scope $apply recursive $apply protection"/>
    <testcase name="should throw an exception if $apply is called while a watch is being initialized" time="0.001" classname="jqlite Chrome 21.0.Scope $apply recursive $apply protection"/>
    <testcase name="should thrown an exception if $apply in called from a watch fn (after init)" time="0.001" classname="jqlite Chrome 21.0.Scope $apply recursive $apply protection"/>
    <testcase name="should add listener for both $emit and $broadcast events" time="0.002" classname="jqlite Chrome 21.0.Scope events $on"/>
    <testcase name="should return a function that deregisters the listener" time="0.002" classname="jqlite Chrome 21.0.Scope events $on"/>
    <testcase name="should bubble event up to the root scope" time="0.002" classname="jqlite Chrome 21.0.Scope events $emit"/>
    <testcase name="should dispatch exceptions to the $exceptionHandler" time="0.001" classname="jqlite Chrome 21.0.Scope events $emit"/>
    <testcase name="should allow stopping event propagation" time="0.002" classname="jqlite Chrome 21.0.Scope events $emit"/>
    <testcase name="should forward method arguments" time="0.001" classname="jqlite Chrome 21.0.Scope events $emit"/>
    <testcase name="should have methods/properties" time="0.001" classname="jqlite Chrome 21.0.Scope events $emit event object"/>
    <testcase name="should have preventDefault method and defaultPrevented property" time="0.002" classname="jqlite Chrome 21.0.Scope events $emit event object"/>
    <testcase name="should broadcast an event from the root scope" time="0.002" classname="jqlite Chrome 21.0.Scope events $broadcast event propagation"/>
    <testcase name="should broadcast an event from a child scope" time="0.001" classname="jqlite Chrome 21.0.Scope events $broadcast event propagation"/>
    <testcase name="should broadcast an event from a leaf scope with a sibling" time="0.002" classname="jqlite Chrome 21.0.Scope events $broadcast event propagation"/>
    <testcase name="should broadcast an event from a leaf scope without a sibling" time="0.002" classname="jqlite Chrome 21.0.Scope events $broadcast event propagation"/>
    <testcase name="should not not fire any listeners for other events" time="0.002" classname="jqlite Chrome 21.0.Scope events $broadcast event propagation"/>
    <testcase name="should return event object" time="0.002" classname="jqlite Chrome 21.0.Scope events $broadcast event propagation"/>
    <testcase name="should receive event object" time="0.001" classname="jqlite Chrome 21.0.Scope events $broadcast listener"/>
    <testcase name="should support passing messages as varargs" time="0.002" classname="jqlite Chrome 21.0.Scope events $broadcast listener"/>
    <testcase name="should publish the params into a service" time="0.003" classname="jqlite Chrome 21.0.$routeParams"/>
    <testcase name="should route and fire change event" time="0.004" classname="jqlite Chrome 21.0.$route"/>
    <testcase name="should not change route when location is canceled" time="0.002" classname="jqlite Chrome 21.0.$route"/>
    <testcase name="should match a route that contains special chars in the path" time="0.003" classname="jqlite Chrome 21.0.$route"/>
    <testcase name="should change route even when only search param changes" time="0.002" classname="jqlite Chrome 21.0.$route"/>
    <testcase name="should allow routes to be defined with just templates without controllers" time="0.003" classname="jqlite Chrome 21.0.$route"/>
    <testcase name="should handle unknown routes with &quot;otherwise&quot; route definition" time="0.002" classname="jqlite Chrome 21.0.$route"/>
    <testcase name="should chain whens and otherwise" time="0.003" classname="jqlite Chrome 21.0.$route"/>
    <testcase name="should not fire $after/beforeRouteChange during bootstrap (if no route)" time="0.002" classname="jqlite Chrome 21.0.$route events"/>
    <testcase name="should fire $routeChangeStart and resolve promises" time="0.003" classname="jqlite Chrome 21.0.$route events"/>
    <testcase name="should fire $routeChangeError event on resolution error" time="0.002" classname="jqlite Chrome 21.0.$route events"/>
    <testcase name="should fetch templates" time="0.003" classname="jqlite Chrome 21.0.$route events"/>
    <testcase name="should not update $routeParams until $routeChangeSuccess" time="0.003" classname="jqlite Chrome 21.0.$route events"/>
    <testcase name="should drop in progress route change when new route change occurs" time="0.003" classname="jqlite Chrome 21.0.$route events"/>
    <testcase name="should drop in progress route change when new route change occurs and old fails" time="0.002" classname="jqlite Chrome 21.0.$route events"/>
    <testcase name="should catch local factory errors" time="0.003" classname="jqlite Chrome 21.0.$route events"/>
    <testcase name="should match route with and without trailing slash" time="0.003" classname="jqlite Chrome 21.0.$route"/>
    <testcase name="should support redirection via redirectTo property by updating $location" time="0.003" classname="jqlite Chrome 21.0.$route redirection"/>
    <testcase name="should interpolate route vars in the redirected path from original path" time="0.002" classname="jqlite Chrome 21.0.$route redirection"/>
    <testcase name="should interpolate route vars in the redirected path from original search" time="0.002" classname="jqlite Chrome 21.0.$route redirection"/>
    <testcase name="should allow custom redirectTo function to be used" time="0.015" classname="jqlite Chrome 21.0.$route redirection"/>
    <testcase name="should replace the url when redirecting" time="0.003" classname="jqlite Chrome 21.0.$route redirection"/>
    <testcase name="should reload a route when reloadOnSearch is enabled and .search() changes" time="0.006" classname="jqlite Chrome 21.0.$route reloadOnSearch"/>
    <testcase name="should not reload a route when reloadOnSearch is disabled and only .search() changes" time="0.003" classname="jqlite Chrome 21.0.$route reloadOnSearch"/>
    <testcase name="should reload reloadOnSearch route when url differs only in route path param" time="0.003" classname="jqlite Chrome 21.0.$route reloadOnSearch"/>
    <testcase name="should update params when reloadOnSearch is disabled and .search() changes" time="0.003" classname="jqlite Chrome 21.0.$route reloadOnSearch"/>
    <testcase name="should reload even if reloadOnSearch is false" time="0.004" classname="jqlite Chrome 21.0.$route reloadOnSearch reload"/>
    <testcase name="should be true if history.pushState defined" time="0" classname="jqlite Chrome 21.0.$sniffer history"/>
    <testcase name="should be false if history or pushState not defined" time="0.001" classname="jqlite Chrome 21.0.$sniffer history"/>
    <testcase name="should be true if onhashchange property defined" time="0" classname="jqlite Chrome 21.0.$sniffer hashchange"/>
    <testcase name="should be false if onhashchange property not defined" time="0" classname="jqlite Chrome 21.0.$sniffer hashchange"/>
    <testcase name="should be false if documentMode is 7 (IE8 comp mode)" time="0" classname="jqlite Chrome 21.0.$sniffer hashchange"/>
    <testcase name="should return true if &quot;onchange&quot; is present in a div element" time="0.001" classname="jqlite Chrome 21.0.$sniffer hasEvent"/>
    <testcase name="should return false if &quot;oninput&quot; is not present in a div element" time="0" classname="jqlite Chrome 21.0.$sniffer hasEvent"/>
    <testcase name="should only create the element once" time="0" classname="jqlite Chrome 21.0.$sniffer hasEvent"/>
    <testcase name="should claim that IE9 doesn&apos;t have support for &quot;oninput&quot;" time="0.001" classname="jqlite Chrome 21.0.$sniffer hasEvent"/>
    <testcase name="should be false if document.SecurityPolicy.isActive not available" time="0" classname="jqlite Chrome 21.0.$sniffer csp"/>
    <testcase name="should use document.SecurityPolicy.isActive() if available" time="0" classname="jqlite Chrome 21.0.$sniffer csp"/>
    <testcase name="should delegate functions to $browser.defer" time="0.001" classname="jqlite Chrome 21.0.$timeout"/>
    <testcase name="should call $apply after each callback is executed" time="0.002" classname="jqlite Chrome 21.0.$timeout"/>
    <testcase name="should NOT call $apply if skipApply is set to true" time="0.002" classname="jqlite Chrome 21.0.$timeout"/>
    <testcase name="should allow you to specify the delay time" time="0.001" classname="jqlite Chrome 21.0.$timeout"/>
    <testcase name="should return a promise which will be resolved with return value of the timeout callback" time="0.002" classname="jqlite Chrome 21.0.$timeout"/>
    <testcase name="should delegate exception to the $exceptionHandler service" time="0.002" classname="jqlite Chrome 21.0.$timeout exception handling"/>
    <testcase name="should call $apply even if an exception is thrown in callback" time="0.002" classname="jqlite Chrome 21.0.$timeout exception handling"/>
    <testcase name="should reject the timeout promise when an exception is thrown in the timeout callback" time="0.002" classname="jqlite Chrome 21.0.$timeout exception handling"/>
    <testcase name="should cancel tasks" time="0.002" classname="jqlite Chrome 21.0.$timeout cancel"/>
    <testcase name="should return true if a task was successfully canceled" time="0.001" classname="jqlite Chrome 21.0.$timeout cancel"/>
    <testcase name="should not throw a runtime exception when given an undefined promise" time="0.002" classname="jqlite Chrome 21.0.$timeout cancel"/>
    <testcase name="should inject $window" time="0.001" classname="jqlite Chrome 21.0.$window"/>
    <testcase name="should instantiate controller and bind methods" time="0.003" classname="jqlite Chrome 21.0.ngController"/>
    <testcase name="should allow nested controllers" time="0.004" classname="jqlite Chrome 21.0.ngController"/>
    <testcase name="should instantiate controller defined on scope" time="0.002" classname="jqlite Chrome 21.0.ngController"/>
    <testcase name="should init model" time="0.002" classname="jqlite Chrome 21.0.ngInit"/>
    <testcase name="should include on external file" time="0.004" classname="jqlite Chrome 21.0.ngInclude"/>
    <testcase name="should support ng-include=&quot;src&quot; syntax" time="0.003" classname="jqlite Chrome 21.0.ngInclude"/>
    <testcase name="should remove previously included text if a falsy value is bound to src" time="0.003" classname="jqlite Chrome 21.0.ngInclude"/>
    <testcase name="should fire $includeContentLoaded event on child scope after linking the content" time="0.002" classname="jqlite Chrome 21.0.ngInclude"/>
    <testcase name="should evaluate onload expression when a partial is loaded" time="0.003" classname="jqlite Chrome 21.0.ngInclude"/>
    <testcase name="should create child scope and destroy old one" time="0.005" classname="jqlite Chrome 21.0.ngInclude"/>
    <testcase name="should do xhr request and cache it" time="0.003" classname="jqlite Chrome 21.0.ngInclude"/>
    <testcase name="should clear content when error during xhr request" time="0.003" classname="jqlite Chrome 21.0.ngInclude"/>
    <testcase name="should be async even if served from cache" time="0.003" classname="jqlite Chrome 21.0.ngInclude"/>
    <testcase name="should discard pending xhr callbacks if a new template is requested before the current finished loading" time="0.003" classname="jqlite Chrome 21.0.ngInclude"/>
    <testcase name="should compile only the content" time="0.004" classname="jqlite Chrome 21.0.ngInclude"/>
    <testcase name="should call $anchorScroll if autoscroll attribute is present" time="0.003" classname="jqlite Chrome 21.0.ngInclude autoscoll"/>
    <testcase name="should call $anchorScroll if autoscroll evaluates to true" time="0.004" classname="jqlite Chrome 21.0.ngInclude autoscoll"/>
    <testcase name="should not call $anchorScroll if autoscroll attribute is not present" time="0.002" classname="jqlite Chrome 21.0.ngInclude autoscoll"/>
    <testcase name="should not call $anchorScroll if autoscroll evaluates to false" time="0.003" classname="jqlite Chrome 21.0.ngInclude autoscoll"/>
    <testcase name="should instantiate form and attach it to DOM" time="0.003" classname="jqlite Chrome 21.0.form"/>
    <testcase name="should remove the widget when element removed" time="0.003" classname="jqlite Chrome 21.0.form"/>
    <testcase name="should use ngForm value as form name" time="0.003" classname="jqlite Chrome 21.0.form"/>
    <testcase name="should publish form to scope when name attr is defined" time="0.002" classname="jqlite Chrome 21.0.form"/>
    <testcase name="should allow form name to be an expression" time="0.016" classname="jqlite Chrome 21.0.form"/>
    <testcase name="should support two forms on a single scope" time="0.006" classname="jqlite Chrome 21.0.form"/>
    <testcase name="should publish widgets" time="0.003" classname="jqlite Chrome 21.0.form"/>
    <testcase name="should prevent form submission" time="0.016" classname="jqlite Chrome 21.0.form preventing default submission"/>
    <testcase name="should prevent the default when the form is destroyed by a submission via a click event" time="0.123" classname="jqlite Chrome 21.0.form preventing default submission"/>
    <testcase name="should NOT prevent form submission if action attribute present" time="0.005" classname="jqlite Chrome 21.0.form preventing default submission"/>
    <testcase name="should chain nested forms" time="0.006" classname="jqlite Chrome 21.0.form nested forms"/>
    <testcase name="should deregister a child form when its DOM is removed" time="0.005" classname="jqlite Chrome 21.0.form nested forms"/>
    <testcase name="should deregister a input when its removed from DOM" time="0.004" classname="jqlite Chrome 21.0.form nested forms"/>
    <testcase name="should chain nested forms in repeater" time="0.005" classname="jqlite Chrome 21.0.form nested forms"/>
    <testcase name="should have ng-valid/ng-invalid css class" time="0.004" classname="jqlite Chrome 21.0.form validation"/>
    <testcase name="should have ng-pristine/ng-dirty css class" time="0.004" classname="jqlite Chrome 21.0.form validation"/>
    <testcase name="should properly evaluate 0 as false" time="0.002" classname="jqlite Chrome 21.0.boolean attr directives"/>
    <testcase name="should bind disabled" time="0.002" classname="jqlite Chrome 21.0.boolean attr directives"/>
    <testcase name="should bind checked" time="0.002" classname="jqlite Chrome 21.0.boolean attr directives"/>
    <testcase name="should bind selected" time="0.003" classname="jqlite Chrome 21.0.boolean attr directives"/>
    <testcase name="should bind readonly" time="0.002" classname="jqlite Chrome 21.0.boolean attr directives"/>
    <testcase name="should bind multiple" time="0.003" classname="jqlite Chrome 21.0.boolean attr directives"/>
    <testcase name="should interpolate the expression and bind to src" time="0.003" classname="jqlite Chrome 21.0.ngSrc"/>
    <testcase name="should interpolate the expression and bind to href" time="0.002" classname="jqlite Chrome 21.0.ngHref"/>
    <testcase name="should bind href and merge with other attrs" time="0.002" classname="jqlite Chrome 21.0.ngHref"/>
    <testcase name="should bind href even if no interpolation" time="0.003" classname="jqlite Chrome 21.0.ngHref"/>
    <testcase name="should get called on form submit" time="0.002" classname="jqlite Chrome 21.0.event directives ngSubmit"/>
    <testcase name="should add new and remove old classes dynamically" time="0.003" classname="jqlite Chrome 21.0.ngClass"/>
    <testcase name="should support adding multiple classes via an array" time="0.002" classname="jqlite Chrome 21.0.ngClass"/>
    <testcase name="should support adding multiple classes conditionally via a map of class names to booleanexpressions" time="0.004" classname="jqlite Chrome 21.0.ngClass"/>
    <testcase name="should support adding multiple classes via a space delimited string" time="0.002" classname="jqlite Chrome 21.0.ngClass"/>
    <testcase name="should preserve class added post compilation with pre-existing classes" time="0.002" classname="jqlite Chrome 21.0.ngClass"/>
    <testcase name="should preserve class added post compilation without pre-existing classes&quot;" time="0.002" classname="jqlite Chrome 21.0.ngClass"/>
    <testcase name="should preserve other classes with similar name&quot;" time="0.002" classname="jqlite Chrome 21.0.ngClass"/>
    <testcase name="should not add duplicate classes" time="0.003" classname="jqlite Chrome 21.0.ngClass"/>
    <testcase name="should remove classes even if it was specified via class attribute" time="0.002" classname="jqlite Chrome 21.0.ngClass"/>
    <testcase name="should remove classes even if they were added by another code" time="0.002" classname="jqlite Chrome 21.0.ngClass"/>
    <testcase name="should convert undefined and null values to an empty string" time="0.002" classname="jqlite Chrome 21.0.ngClass"/>
    <testcase name="should ngClass odd/even" time="0.004" classname="jqlite Chrome 21.0.ngClass"/>
    <testcase name="should allow both ngClass and ngClassOdd/Even on the same element" time="0.003" classname="jqlite Chrome 21.0.ngClass"/>
    <testcase name="should allow both ngClass and ngClassOdd/Even with multiple classes" time="0.005" classname="jqlite Chrome 21.0.ngClass"/>
    <testcase name="should reapply ngClass when interpolated class attribute changes" time="0.003" classname="jqlite Chrome 21.0.ngClass"/>
    <testcase name="should update ngClassOdd/Even when model is changed by filtering" time="0.004" classname="jqlite Chrome 21.0.ngClass"/>
    <testcase name="should update ngClassOdd/Even when model is changed by sorting" time="0.02" classname="jqlite Chrome 21.0.ngClass"/>
    <testcase name="should fail on non-assignable model binding" time="0.002" classname="jqlite Chrome 21.0.NgModelController"/>
    <testcase name="should init the properties" time="0.002" classname="jqlite Chrome 21.0.NgModelController"/>
    <testcase name="should propagate invalid to the parent form only when valid" time="0.003" classname="jqlite Chrome 21.0.NgModelController setValidity"/>
    <testcase name="should set and unset the error" time="0.002" classname="jqlite Chrome 21.0.NgModelController setValidity"/>
    <testcase name="should set valid/invalid" time="0.002" classname="jqlite Chrome 21.0.NgModelController setValidity"/>
    <testcase name="should emit $valid only when $invalid" time="0.002" classname="jqlite Chrome 21.0.NgModelController setValidity"/>
    <testcase name="should set the value to $viewValue" time="0.002" classname="jqlite Chrome 21.0.NgModelController view -&gt; model"/>
    <testcase name="should pipeline all registered parsers and set result to $modelValue" time="0.002" classname="jqlite Chrome 21.0.NgModelController view -&gt; model"/>
    <testcase name="should fire viewChangeListeners when the value changes in the view (even if invalid)" time="0.002" classname="jqlite Chrome 21.0.NgModelController view -&gt; model"/>
    <testcase name="should reset the model when the view is invalid" time="0.002" classname="jqlite Chrome 21.0.NgModelController view -&gt; model"/>
    <testcase name="should call parentForm.$setDirty only when pristine" time="0.002" classname="jqlite Chrome 21.0.NgModelController view -&gt; model"/>
    <testcase name="should set the value to $modelValue" time="0.002" classname="jqlite Chrome 21.0.NgModelController model -&gt; view"/>
    <testcase name="should pipeline all registered formatters in reversed order and set result to $viewValue" time="0.002" classname="jqlite Chrome 21.0.NgModelController model -&gt; view"/>
    <testcase name="should $render only if value changed" time="0.002" classname="jqlite Chrome 21.0.NgModelController model -&gt; view"/>
    <testcase name="should clear the view even if invalid" time="0.002" classname="jqlite Chrome 21.0.NgModelController model -&gt; view"/>
    <testcase name="should set css classes (ng-valid, ng-invalid, ng-pristine, ng-dirty)" time="0.004" classname="jqlite Chrome 21.0.ngModel"/>
    <testcase name="should set invalid classes on init" time="0.003" classname="jqlite Chrome 21.0.ngModel"/>
    <testcase name="should bind to a model" time="0.003" classname="jqlite Chrome 21.0.input"/>
    <testcase name="should not set readonly or disabled property on ie7" time="0.003" classname="jqlite Chrome 21.0.input"/>
    <testcase name="should cleanup it self from the parent form" time="0.003" classname="jqlite Chrome 21.0.input"/>
    <testcase name="should update the model on &quot;blur&quot; event" time="0.003" classname="jqlite Chrome 21.0.input"/>
    <testcase name="should update the model and trim the value" time="0.003" classname="jqlite Chrome 21.0.input"/>
    <testcase name="should update the model and not trim the value" time="0.003" classname="jqlite Chrome 21.0.input"/>
    <testcase name="should allow complex reference binding" time="0.003" classname="jqlite Chrome 21.0.input"/>
    <testcase name="should ignore input without ngModel directive" time="0.002" classname="jqlite Chrome 21.0.input"/>
    <testcase name="should report error on assignment error" time="0.003" classname="jqlite Chrome 21.0.input"/>
    <testcase name="should render as blank if null" time="0.003" classname="jqlite Chrome 21.0.input"/>
    <testcase name="should render 0 even if it is a number" time="0.002" classname="jqlite Chrome 21.0.input"/>
    <testcase name="should validate in-lined pattern" time="0.004" classname="jqlite Chrome 21.0.input pattern"/>
    <testcase name="should validate pattern from scope" time="0.031" classname="jqlite Chrome 21.0.input pattern"/>
    <testcase name="should invalid shorter than given minlenght" time="0.003" classname="jqlite Chrome 21.0.input minlength"/>
    <testcase name="should invalid shorter than given maxlenght" time="0.003" classname="jqlite Chrome 21.0.input maxlength"/>
    <testcase name="should reset the model if view is invalid" time="0.003" classname="jqlite Chrome 21.0.input number"/>
    <testcase name="should render as blank if null" time="0.002" classname="jqlite Chrome 21.0.input number"/>
    <testcase name="should come up blank when no value specified" time="0.007" classname="jqlite Chrome 21.0.input number"/>
    <testcase name="should parse empty string to null" time="0.003" classname="jqlite Chrome 21.0.input number"/>
    <testcase name="should validate" time="0.003" classname="jqlite Chrome 21.0.input number min"/>
    <testcase name="should validate" time="0.003" classname="jqlite Chrome 21.0.input number max"/>
    <testcase name="should be valid even if value is 0" time="0.002" classname="jqlite Chrome 21.0.input number required"/>
    <testcase name="should be valid even if value 0 is set from model" time="0.003" classname="jqlite Chrome 21.0.input number required"/>
    <testcase name="should register required on non boolean elements" time="0.003" classname="jqlite Chrome 21.0.input number required"/>
    <testcase name="should validate e-mail" time="0.003" classname="jqlite Chrome 21.0.input email"/>
    <testcase name="should validate email" time="0.001" classname="jqlite Chrome 21.0.input email EMAIL_REGEXP"/>
    <testcase name="should validate url" time="0.003" classname="jqlite Chrome 21.0.input url"/>
    <testcase name="should validate url" time="0.001" classname="jqlite Chrome 21.0.input url URL_REGEXP"/>
    <testcase name="should update the model" time="0.004" classname="jqlite Chrome 21.0.input radio"/>
    <testcase name="should allow {{expr}} as value" time="0.003" classname="jqlite Chrome 21.0.input radio"/>
    <testcase name="should ignore checkbox without ngModel directive" time="0.002" classname="jqlite Chrome 21.0.input checkbox"/>
    <testcase name="should format booleans" time="0.002" classname="jqlite Chrome 21.0.input checkbox"/>
    <testcase name="should support type=&quot;checkbox&quot; with non-standard capitalization" time="0.003" classname="jqlite Chrome 21.0.input checkbox"/>
    <testcase name="should allow custom enumeration" time="0.002" classname="jqlite Chrome 21.0.input checkbox"/>
    <testcase name="should be required if false" time="0.002" classname="jqlite Chrome 21.0.input checkbox"/>
    <testcase name="should process textarea" time="0.002" classname="jqlite Chrome 21.0.input textarea"/>
    <testcase name="should ignore textarea without ngModel directive" time="0.001" classname="jqlite Chrome 21.0.input textarea"/>
    <testcase name="should parse text into an array" time="0.003" classname="jqlite Chrome 21.0.input ngList"/>
    <testcase name="should not clobber text if model changes due to itself" time="0.003" classname="jqlite Chrome 21.0.input ngList"/>
    <testcase name="should convert empty string to an empty array" time="0.002" classname="jqlite Chrome 21.0.input ngList"/>
    <testcase name="should allow custom separator" time="0.003" classname="jqlite Chrome 21.0.input ngList"/>
    <testcase name="should allow regexp as a separator" time="0.003" classname="jqlite Chrome 21.0.input ngList"/>
    <testcase name="should allow bindings via ngRequired" time="0.004" classname="jqlite Chrome 21.0.input required"/>
    <testcase name="should invalid initial value with bound required" time="0.002" classname="jqlite Chrome 21.0.input required"/>
    <testcase name="should be $invalid but $pristine if not touched" time="0.003" classname="jqlite Chrome 21.0.input required"/>
    <testcase name="should allow empty string if not required" time="0.002" classname="jqlite Chrome 21.0.input required"/>
    <testcase name="should set $invalid when model undefined" time="0.002" classname="jqlite Chrome 21.0.input required"/>
    <testcase name="should $eval expression after new value is set in the model" time="0.003" classname="jqlite Chrome 21.0.input ngChange"/>
    <testcase name="should not $eval the expression if changed from model" time="0.002" classname="jqlite Chrome 21.0.input ngChange"/>
    <testcase name="should $eval ngChange expression on checkbox" time="0.002" classname="jqlite Chrome 21.0.input ngChange"/>
    <testcase name="should evaluate and set constant expressions" time="0.004" classname="jqlite Chrome 21.0.input ngValue"/>
    <testcase name="should watch the expression" time="0.003" classname="jqlite Chrome 21.0.input ngValue"/>
    <testcase name="should work inside ngRepeat" time="0.004" classname="jqlite Chrome 21.0.input ngValue"/>
    <testcase name="should work inside ngRepeat with primitive values" time="0.004" classname="jqlite Chrome 21.0.input ngValue"/>
    <testcase name="should work inside ngRepeat without name attribute" time="0.005" classname="jqlite Chrome 21.0.input ngValue"/>
    <testcase name="should set text" time="0.001" classname="jqlite Chrome 21.0.ngBind* ngBind"/>
    <testcase name="should set text to blank if undefined" time="0.002" classname="jqlite Chrome 21.0.ngBind* ngBind"/>
    <testcase name="should suppress rendering of falsy values" time="0.002" classname="jqlite Chrome 21.0.ngBind* ngBind"/>
    <testcase name="should ngBindTemplate" time="0.002" classname="jqlite Chrome 21.0.ngBind* ngBindTemplate"/>
    <testcase name="should render object as JSON ignore $$" time="0.001" classname="jqlite Chrome 21.0.ngBind* ngBindTemplate"/>
    <testcase name="should set unsafe html" time="0.002" classname="jqlite Chrome 21.0.ngBind* ngBindHtmlUnsafe"/>
    <testcase name="should get removed when an element is compiled" time="0.002" classname="jqlite Chrome 21.0.ngCloak"/>
    <testcase name="should remove ngCloak class from a compiled element with attribute" time="0.002" classname="jqlite Chrome 21.0.ngCloak"/>
    <testcase name="should remove ngCloak class from a compiled element" time="0.002" classname="jqlite Chrome 21.0.ngCloak"/>
    <testcase name="it should turn on CSP mode in $sniffer" time="0.001" classname="jqlite Chrome 21.0.ngCsp"/>
    <testcase name="should get called on a click" time="0.002" classname="jqlite Chrome 21.0.ngClick"/>
    <testcase name="should pass event object" time="0.002" classname="jqlite Chrome 21.0.ngClick"/>
    <testcase name="should prevent default action to be executed when href is empty" time="0.001" classname="jqlite Chrome 21.0.a"/>
    <testcase name="should set" time="0.002" classname="jqlite Chrome 21.0.ngStyle"/>
    <testcase name="should silently ignore undefined style" time="0.001" classname="jqlite Chrome 21.0.ngStyle"/>
    <testcase name="should not mess up stuff after compilation" time="0.002" classname="jqlite Chrome 21.0.ngStyle preserving styles set before and after compilation"/>
    <testcase name="should not mess up stuff after $apply with no model changes" time="0.002" classname="jqlite Chrome 21.0.ngStyle preserving styles set before and after compilation"/>
    <testcase name="should not mess up stuff after $apply with non-colliding model changes" time="0.002" classname="jqlite Chrome 21.0.ngStyle preserving styles set before and after compilation"/>
    <testcase name="should overwrite original styles after a colliding model change" time="0.001" classname="jqlite Chrome 21.0.ngStyle preserving styles set before and after compilation"/>
    <testcase name="should show and hide an element" time="0.002" classname="jqlite Chrome 21.0.ngShow / ngHide ngShow"/>
    <testcase name="should make hidden element visible" time="0.002" classname="jqlite Chrome 21.0.ngShow / ngHide ngShow"/>
    <testcase name="should hide an element" time="0.001" classname="jqlite Chrome 21.0.ngShow / ngHide ngHide"/>
    <testcase name="should prevent compilation of the owning element and its children" time="0.002" classname="jqlite Chrome 21.0.ngNonBindable"/>
    <testcase name="should ngRepeat over array" time="0.003" classname="jqlite Chrome 21.0.ngRepeat"/>
    <testcase name="should ngRepeat over array of primitive correctly" time="0.01" classname="jqlite Chrome 21.0.ngRepeat"/>
    <testcase name="should ngRepeat over object" time="0.002" classname="jqlite Chrome 21.0.ngRepeat"/>
    <testcase name="should ngRepeat over object with primitive value correctly" time="0.005" classname="jqlite Chrome 21.0.ngRepeat"/>
    <testcase name="should not ngRepeat over parent properties" time="0.002" classname="jqlite Chrome 21.0.ngRepeat"/>
    <testcase name="should error on wrong parsing of ngRepeat" time="0.001" classname="jqlite Chrome 21.0.ngRepeat"/>
    <testcase name="should throw error when left-hand-side of ngRepeat can&apos;t be parsed" time="0.002" classname="jqlite Chrome 21.0.ngRepeat"/>
    <testcase name="should expose iterator offset as $index when iterating over arrays" time="0.003" classname="jqlite Chrome 21.0.ngRepeat"/>
    <testcase name="should expose iterator offset as $index when iterating over objects" time="0.002" classname="jqlite Chrome 21.0.ngRepeat"/>
    <testcase name="should expose iterator position as $first, $middle and $last when iterating over arrays" time="0.004" classname="jqlite Chrome 21.0.ngRepeat"/>
    <testcase name="should expose iterator position as $first, $middle and $last when iterating over objects" time="0.003" classname="jqlite Chrome 21.0.ngRepeat"/>
    <testcase name="should ignore $ and $$ properties" time="0.003" classname="jqlite Chrome 21.0.ngRepeat"/>
    <testcase name="should repeat over nested arrays" time="0.004" classname="jqlite Chrome 21.0.ngRepeat"/>
    <testcase name="should ignore non-array element properties when iterating over an array" time="0.002" classname="jqlite Chrome 21.0.ngRepeat"/>
    <testcase name="should iterate over non-existent elements of a sparse array" time="0.003" classname="jqlite Chrome 21.0.ngRepeat"/>
    <testcase name="should iterate over all kinds of types" time="0.003" classname="jqlite Chrome 21.0.ngRepeat"/>
    <testcase name="should preserve the order of elements" time="0.003" classname="jqlite Chrome 21.0.ngRepeat stability"/>
    <testcase name="should support duplicates" time="0.013" classname="jqlite Chrome 21.0.ngRepeat stability"/>
    <testcase name="should remove last item when one duplicate instance is removed" time="0.003" classname="jqlite Chrome 21.0.ngRepeat stability"/>
    <testcase name="should reverse items when the collection is reversed" time="0.003" classname="jqlite Chrome 21.0.ngRepeat stability"/>
    <testcase name="should show single/plural strings" time="0.003" classname="jqlite Chrome 21.0.ngPluralize deal with pluralized strings without offset"/>
    <testcase name="should show single/plural strings with mal-formed inputs" time="0.002" classname="jqlite Chrome 21.0.ngPluralize deal with pluralized strings without offset"/>
    <testcase name="should show single/plural strings with offset" time="0.003" classname="jqlite Chrome 21.0.ngPluralize deal with pluralized strings with offset"/>
    <testcase name="should support custom interpolation symbols" time="0.003" classname="jqlite Chrome 21.0.ngPluralize interpolation"/>
    <testcase name="should not result empty string in img src" time="0.002" classname="jqlite Chrome 21.0.ngSrc"/>
    <testcase name="should switch on value change" time="0.003" classname="jqlite Chrome 21.0.ngSwitch"/>
    <testcase name="should switch on switch-when-default" time="0.003" classname="jqlite Chrome 21.0.ngSwitch"/>
    <testcase name="should call change on switch" time="0.002" classname="jqlite Chrome 21.0.ngSwitch"/>
    <testcase name="should properly create and destroy child scopes" time="0.007" classname="jqlite Chrome 21.0.ngSwitch"/>
    <testcase name="should do nothing when no routes are defined" time="0.003" classname="jqlite Chrome 21.0.ngView"/>
    <testcase name="should instantiate controller after compiling the content" time="0.003" classname="jqlite Chrome 21.0.ngView"/>
    <testcase name="should support string controller declaration" time="0.003" classname="jqlite Chrome 21.0.ngView"/>
    <testcase name="should load content via xhr when route changes" time="0.003" classname="jqlite Chrome 21.0.ngView"/>
    <testcase name="should use inline content route changes" time="0.003" classname="jqlite Chrome 21.0.ngView"/>
    <testcase name="should remove all content when location changes to an unknown route" time="0.002" classname="jqlite Chrome 21.0.ngView"/>
    <testcase name="should chain scopes and propagate evals to the child scope" time="0.002" classname="jqlite Chrome 21.0.ngView"/>
    <testcase name="should be possible to nest ngView in ngInclude" time="0.003" classname="jqlite Chrome 21.0.ngView"/>
    <testcase name="should initialize view template after the view controller was initialized even when templates were cached" time="0.004" classname="jqlite Chrome 21.0.ngView"/>
    <testcase name="should discard pending xhr callbacks if a new route is requested before the current finished loading" time="0.003" classname="jqlite Chrome 21.0.ngView"/>
    <testcase name="should be async even if served from cache" time="0.002" classname="jqlite Chrome 21.0.ngView"/>
    <testcase name="should fire $contentLoaded event when content compiled and linked" time="0.003" classname="jqlite Chrome 21.0.ngView"/>
    <testcase name="should destroy previous scope" time="0.002" classname="jqlite Chrome 21.0.ngView"/>
    <testcase name="should destroy previous scope if multiple route changes occur before server responds" time="0.003" classname="jqlite Chrome 21.0.ngView"/>
    <testcase name="should $destroy scope after update and reload" time="0.003" classname="jqlite Chrome 21.0.ngView"/>
    <testcase name="should evaluate onload expression after linking the content" time="0.003" classname="jqlite Chrome 21.0.ngView"/>
    <testcase name="should set $scope and $controllerController on the view" time="0.003" classname="jqlite Chrome 21.0.ngView"/>
    <testcase name="should populate $templateCache with contents of a ng-template script element" time="0.001" classname="jqlite Chrome 21.0.scriptDirective"/>
    <testcase name="should not compile scripts" time="0.002" classname="jqlite Chrome 21.0.scriptDirective"/>
    <testcase name="should compile children of a select without a ngModel, but not create a model for it" time="0.003" classname="jqlite Chrome 21.0.select select-one"/>
    <testcase name="should not interfere with selection via selected attr if ngModel directive is not present" time="0.002" classname="jqlite Chrome 21.0.select select-one"/>
    <testcase name="should require" time="0.004" classname="jqlite Chrome 21.0.select select-one"/>
    <testcase name="should not be invalid if no require" time="0.013" classname="jqlite Chrome 21.0.select select-one"/>
    <testcase name="should work with repeated value options" time="0.008" classname="jqlite Chrome 21.0.select select-one"/>
    <testcase name="should select the empty option when model is undefined" time="0.003" classname="jqlite Chrome 21.0.select select-one empty option"/>
    <testcase name="should support defining an empty option anywhere in the option list" time="0.003" classname="jqlite Chrome 21.0.select select-one empty option"/>
    <testcase name="should set the model to empty string when empty option is selected" time="0.004" classname="jqlite Chrome 21.0.select select-one empty option"/>
    <testcase name="should select empty option when model is undefined" time="0.005" classname="jqlite Chrome 21.0.select select-one empty option interactions with repeated options"/>
    <testcase name="should set model to empty string when selected" time="0.005" classname="jqlite Chrome 21.0.select select-one empty option interactions with repeated options"/>
    <testcase name="should not break if both the select and repeater models change at once" time="0.004" classname="jqlite Chrome 21.0.select select-one empty option interactions with repeated options"/>
    <testcase name="should insert&amp;select temporary unknown option when no options-model match" time="0.004" classname="jqlite Chrome 21.0.select select-one unknown option"/>
    <testcase name="should NOT insert temporary unknown option when model is undefined and empty options is present" time="0.004" classname="jqlite Chrome 21.0.select select-one unknown option"/>
    <testcase name="should insert&amp;select temporary unknown option when no options-model match, empty option is present and model is defined" time="0.004" classname="jqlite Chrome 21.0.select select-one unknown option"/>
    <testcase name="should work with repeated options" time="0.005" classname="jqlite Chrome 21.0.select select-one unknown option interactions with repeated options"/>
    <testcase name="should work with empty option and repeated options" time="0.005" classname="jqlite Chrome 21.0.select select-one unknown option interactions with repeated options"/>
    <testcase name="should insert unknown element when repeater shrinks and selected option is unavailable" time="0.005" classname="jqlite Chrome 21.0.select select-one unknown option interactions with repeated options"/>
    <testcase name="should support type=&quot;select-multiple&quot;" time="0.004" classname="jqlite Chrome 21.0.select select-multiple"/>
    <testcase name="should require" time="0.004" classname="jqlite Chrome 21.0.select select-multiple"/>
    <testcase name="should throw when not formated &quot;? for ? in ?&quot;" time="0.004" classname="jqlite Chrome 21.0.select ngOptions"/>
    <testcase name="should render a list" time="0.007" classname="jqlite Chrome 21.0.select ngOptions"/>
    <testcase name="should render an object" time="0.005" classname="jqlite Chrome 21.0.select ngOptions"/>
    <testcase name="should grow list" time="0.006" classname="jqlite Chrome 21.0.select ngOptions"/>
    <testcase name="should shrink list" time="0.006" classname="jqlite Chrome 21.0.select ngOptions"/>
    <testcase name="should shrink and then grow list" time="0.003" classname="jqlite Chrome 21.0.select ngOptions"/>
    <testcase name="should update list" time="0.006" classname="jqlite Chrome 21.0.select ngOptions"/>
    <testcase name="should preserve existing options" time="0.003" classname="jqlite Chrome 21.0.select ngOptions"/>
    <testcase name="should bind to scope value" time="0.003" classname="jqlite Chrome 21.0.select ngOptions binding"/>
    <testcase name="should bind to scope value and group" time="0.004" classname="jqlite Chrome 21.0.select ngOptions binding"/>
    <testcase name="should bind to scope value through experession" time="0.004" classname="jqlite Chrome 21.0.select ngOptions binding"/>
    <testcase name="should bind to object key" time="0.004" classname="jqlite Chrome 21.0.select ngOptions binding"/>
    <testcase name="should bind to object value" time="0.003" classname="jqlite Chrome 21.0.select ngOptions binding"/>
    <testcase name="should insert a blank option if bound to null" time="0.016" classname="jqlite Chrome 21.0.select ngOptions binding"/>
    <testcase name="should reuse blank option if bound to null" time="0.004" classname="jqlite Chrome 21.0.select ngOptions binding"/>
    <testcase name="should insert a unknown option if bound to something not in the list" time="0.004" classname="jqlite Chrome 21.0.select ngOptions binding"/>
    <testcase name="should select correct input if previously selected option was &quot;?&quot;" time="0.003" classname="jqlite Chrome 21.0.select ngOptions binding"/>
    <testcase name="should be compiled as template, be watched and updated" time="0.004" classname="jqlite Chrome 21.0.select ngOptions blank option"/>
    <testcase name="should support binding via ngBindTemplate directive" time="0.004" classname="jqlite Chrome 21.0.select ngOptions blank option"/>
    <testcase name="should support biding via ngBind attribute" time="0.004" classname="jqlite Chrome 21.0.select ngOptions blank option"/>
    <testcase name="should be rendered with the attributes preserved" time="0.012" classname="jqlite Chrome 21.0.select ngOptions blank option"/>
    <testcase name="should update model on change" time="0.006" classname="jqlite Chrome 21.0.select ngOptions on change"/>
    <testcase name="should update model on change through expression" time="0.005" classname="jqlite Chrome 21.0.select ngOptions on change"/>
    <testcase name="should update model to null on change" time="0.004" classname="jqlite Chrome 21.0.select ngOptions on change"/>
    <testcase name="should read multiple selection" time="0.004" classname="jqlite Chrome 21.0.select ngOptions select-many"/>
    <testcase name="should update model on change" time="0.004" classname="jqlite Chrome 21.0.select ngOptions select-many"/>
    <testcase name="should select from object" time="0.004" classname="jqlite Chrome 21.0.select ngOptions select-many"/>
    <testcase name="should allow bindings on ngRequired" time="0.006" classname="jqlite Chrome 21.0.select ngOptions ngRequired"/>
    <testcase name="should populate value attribute on OPTION" time="0.003" classname="jqlite Chrome 21.0.select option"/>
    <testcase name="should ignore value if already exists" time="0.003" classname="jqlite Chrome 21.0.select option"/>
    <testcase name="should set value even if self closing HTML" time="0.003" classname="jqlite Chrome 21.0.select option"/>
    <testcase name="should not blow up when option directive is found inside of a datalist" time="0.002" classname="jqlite Chrome 21.0.select option"/>
    <testcase name="should not compile style element" time="0.002" classname="jqlite Chrome 21.0.style"/>
    <testcase name="should compile content of element with style attr" time="0.003" classname="jqlite Chrome 21.0.style"/>
    <testcase name="should filter by string" time="0.002" classname="jqlite Chrome 21.0.Filter: filter"/>
    <testcase name="should not read $ properties" time="0.001" classname="jqlite Chrome 21.0.Filter: filter"/>
    <testcase name="should filter on specific property" time="0.002" classname="jqlite Chrome 21.0.Filter: filter"/>
    <testcase name="should take function as predicate" time="0.001" classname="jqlite Chrome 21.0.Filter: filter"/>
    <testcase name="should take object as perdicate" time="0.002" classname="jqlite Chrome 21.0.Filter: filter"/>
    <testcase name="should support negation operator" time="0.002" classname="jqlite Chrome 21.0.Filter: filter"/>
    <testcase name="should call the filter when evaluating expression" time="0.002" classname="jqlite Chrome 21.0.filters"/>
    <testcase name="should format according to different patterns" time="0.003" classname="jqlite Chrome 21.0.filters formatNumber"/>
    <testcase name="should format according different seperators" time="0.001" classname="jqlite Chrome 21.0.filters formatNumber"/>
    <testcase name="should format with or without fractionSize" time="0.001" classname="jqlite Chrome 21.0.filters formatNumber"/>
    <testcase name="should do basic currency filtering" time="0.002" classname="jqlite Chrome 21.0.filters currency"/>
    <testcase name="should return empty string for non-numbers" time="0.002" classname="jqlite Chrome 21.0.filters currency"/>
    <testcase name="should do basic filter" time="0.002" classname="jqlite Chrome 21.0.filters number"/>
    <testcase name="should filter exponential numbers" time="0.002" classname="jqlite Chrome 21.0.filters number"/>
    <testcase name="should do basic filter" time="0.002" classname="jqlite Chrome 21.0.filters json"/>
    <testcase name="should do basic filter" time="0.002" classname="jqlite Chrome 21.0.filters lowercase"/>
    <testcase name="should do basic filter" time="0.001" classname="jqlite Chrome 21.0.filters uppercase"/>
    <testcase name="should ignore falsy inputs" time="0.002" classname="jqlite Chrome 21.0.filters date"/>
    <testcase name="should do basic filter" time="0.001" classname="jqlite Chrome 21.0.filters date"/>
    <testcase name="should accept number or number string representing milliseconds as input" time="0.002" classname="jqlite Chrome 21.0.filters date"/>
    <testcase name="should accept various format strings" time="0.003" classname="jqlite Chrome 21.0.filters date"/>
    <testcase name="should treat single quoted strings as string literals" time="0.002" classname="jqlite Chrome 21.0.filters date"/>
    <testcase name="should treat a sequence of two single quotes as a literal single quote" time="0.014" classname="jqlite Chrome 21.0.filters date"/>
    <testcase name="should accept default formats" time="0.002" classname="jqlite Chrome 21.0.filters date"/>
    <testcase name="should parse format ending with non-replaced string" time="0.002" classname="jqlite Chrome 21.0.filters date"/>
    <testcase name="should support various iso8061 date strings as input" time="0.002" classname="jqlite Chrome 21.0.filters date"/>
    <testcase name="should support different degrees of subsecond precision" time="0.002" classname="jqlite Chrome 21.0.filters date"/>
    <testcase name="should return the first X items when X is positive" time="0.002" classname="jqlite Chrome 21.0.Filter: limitTo"/>
    <testcase name="should return the last X items when X is negative" time="0.001" classname="jqlite Chrome 21.0.Filter: limitTo"/>
    <testcase name="should return an empty array when X cannot be parsed" time="0.002" classname="jqlite Chrome 21.0.Filter: limitTo"/>
    <testcase name="should return an empty array when input is not Array type" time="0.002" classname="jqlite Chrome 21.0.Filter: limitTo"/>
    <testcase name="should return a copy of input array if X is exceeds array length" time="0.002" classname="jqlite Chrome 21.0.Filter: limitTo"/>
    <testcase name="should return same array if predicate is falsy" time="0.001" classname="jqlite Chrome 21.0.Filter: orderBy"/>
    <testcase name="shouldSortArrayInReverse" time="0.001" classname="jqlite Chrome 21.0.Filter: orderBy"/>
    <testcase name="should sort array by predicate" time="0.002" classname="jqlite Chrome 21.0.Filter: orderBy"/>
    <testcase name="should use function" time="0.002" classname="jqlite Chrome 21.0.Filter: orderBy"/>
    <testcase name="should provide access to existing cookies via object properties and keep them in sync" time="0.002" classname="jqlite Chrome 21.0.$cookies"/>
    <testcase name="should create or update a cookie when a value is assigned to a property" time="0.002" classname="jqlite Chrome 21.0.$cookies"/>
    <testcase name="should drop or reset any cookie that was set to a non-string value" time="0.002" classname="jqlite Chrome 21.0.$cookies"/>
    <testcase name="should remove a cookie when a $cookies property is deleted" time="0.002" classname="jqlite Chrome 21.0.$cookies"/>
    <testcase name="should drop or reset cookies that browser refused to store" time="0.002" classname="jqlite Chrome 21.0.$cookies"/>
    <testcase name="should serialize objects to json" time="0.002" classname="jqlite Chrome 21.0.$cookieStore"/>
    <testcase name="should deserialize json to object" time="0.002" classname="jqlite Chrome 21.0.$cookieStore"/>
    <testcase name="should delete objects from the store when remove is called" time="0.001" classname="jqlite Chrome 21.0.$cookieStore"/>
    <testcase name="should build resource" time="0.003" classname="jqlite Chrome 21.0.resource"/>
    <testcase name="should default to empty parameters" time="0.002" classname="jqlite Chrome 21.0.resource"/>
    <testcase name="should ignore slashes of undefinend parameters" time="0.003" classname="jqlite Chrome 21.0.resource"/>
    <testcase name="should support escaping colons in url template" time="0.002" classname="jqlite Chrome 21.0.resource"/>
    <testcase name="should correctly encode url params" time="0.002" classname="jqlite Chrome 21.0.resource"/>
    <testcase name="should not encode @ in url params" time="0.002" classname="jqlite Chrome 21.0.resource"/>
    <testcase name="should encode &amp; in url params" time="0.002" classname="jqlite Chrome 21.0.resource"/>
    <testcase name="should build resource with default param" time="0.003" classname="jqlite Chrome 21.0.resource"/>
    <testcase name="should build resource with action default param overriding default param" time="0.002" classname="jqlite Chrome 21.0.resource"/>
    <testcase name="should build resource with action default param reading the value from instance" time="0.002" classname="jqlite Chrome 21.0.resource"/>
    <testcase name="should handle multiple params with same name" time="0.003" classname="jqlite Chrome 21.0.resource"/>
    <testcase name="should create resource" time="0.003" classname="jqlite Chrome 21.0.resource"/>
    <testcase name="should read resource" time="0.002" classname="jqlite Chrome 21.0.resource"/>
    <testcase name="should send correct headers" time="0.002" classname="jqlite Chrome 21.0.resource"/>
    <testcase name="should read partial resource" time="0.003" classname="jqlite Chrome 21.0.resource"/>
    <testcase name="should update resource" time="0.002" classname="jqlite Chrome 21.0.resource"/>
    <testcase name="should query resource" time="0.003" classname="jqlite Chrome 21.0.resource"/>
    <testcase name="should have all arguments optional" time="0.002" classname="jqlite Chrome 21.0.resource"/>
    <testcase name="should delete resource and call callback" time="0.003" classname="jqlite Chrome 21.0.resource"/>
    <testcase name="should post charge verb" time="0.002" classname="jqlite Chrome 21.0.resource"/>
    <testcase name="should post charge verb on instance" time="0.002" classname="jqlite Chrome 21.0.resource"/>
    <testcase name="should patch a resource" time="0.003" classname="jqlite Chrome 21.0.resource"/>
    <testcase name="should create on save" time="0.002" classname="jqlite Chrome 21.0.resource"/>
    <testcase name="should not mutate the resource object if response contains no body" time="0.003" classname="jqlite Chrome 21.0.resource"/>
    <testcase name="should bind default parameters" time="0.002" classname="jqlite Chrome 21.0.resource"/>
    <testcase name="should exercise full stack" time="0.002" classname="jqlite Chrome 21.0.resource"/>
    <testcase name="should call the error callback if provided on non 2xx response" time="0.002" classname="jqlite Chrome 21.0.resource failure mode"/>
    <testcase name="should call the error callback if provided on non 2xx response" time="0.002" classname="jqlite Chrome 21.0.resource failure mode"/>
    <testcase name="should parse basic format" time="0.002" classname="jqlite Chrome 21.0.HTML htmlParser"/>
    <testcase name="should parse newlines in tags" time="0.002" classname="jqlite Chrome 21.0.HTML htmlParser"/>
    <testcase name="should parse newlines in attributes" time="0.002" classname="jqlite Chrome 21.0.HTML htmlParser"/>
    <testcase name="should parse namespace" time="0.002" classname="jqlite Chrome 21.0.HTML htmlParser"/>
    <testcase name="should parse empty value attribute of node" time="0.002" classname="jqlite Chrome 21.0.HTML htmlParser"/>
    <testcase name="should echo html" time="0.006" classname="jqlite Chrome 21.0.HTML"/>
    <testcase name="should remove script" time="0.003" classname="jqlite Chrome 21.0.HTML"/>
    <testcase name="should remove nested script" time="0.001" classname="jqlite Chrome 21.0.HTML"/>
    <testcase name="should remove attrs" time="0.002" classname="jqlite Chrome 21.0.HTML"/>
    <testcase name="should remove style" time="0.002" classname="jqlite Chrome 21.0.HTML"/>
    <testcase name="should remove script and style" time="0.001" classname="jqlite Chrome 21.0.HTML"/>
    <testcase name="should remove double nested script" time="0.002" classname="jqlite Chrome 21.0.HTML"/>
    <testcase name="should remove unknown  names" time="0.002" classname="jqlite Chrome 21.0.HTML"/>
    <testcase name="should remove unsafe value" time="0.002" classname="jqlite Chrome 21.0.HTML"/>
    <testcase name="should handle self closed elements" time="0.001" classname="jqlite Chrome 21.0.HTML"/>
    <testcase name="should handle namespace" time="0.002" classname="jqlite Chrome 21.0.HTML"/>
    <testcase name="should handle entities" time="0.002" classname="jqlite Chrome 21.0.HTML"/>
    <testcase name="should handle improper html" time="0.001" classname="jqlite Chrome 21.0.HTML"/>
    <testcase name="should handle improper html2" time="0.002" classname="jqlite Chrome 21.0.HTML"/>
    <testcase name="should ignore back slash as escape" time="0.002" classname="jqlite Chrome 21.0.HTML"/>
    <testcase name="should ignore object attributes" time="0.002" classname="jqlite Chrome 21.0.HTML"/>
    <testcase name="should write basic HTML" time="0.002" classname="jqlite Chrome 21.0.HTML htmlSanitizerWriter"/>
    <testcase name="should escape text nodes" time="0.001" classname="jqlite Chrome 21.0.HTML htmlSanitizerWriter"/>
    <testcase name="should escape IE script" time="0.001" classname="jqlite Chrome 21.0.HTML htmlSanitizerWriter"/>
    <testcase name="should escape attributes" time="0.001" classname="jqlite Chrome 21.0.HTML htmlSanitizerWriter"/>
    <testcase name="should ignore missformed elements" time="0.002" classname="jqlite Chrome 21.0.HTML htmlSanitizerWriter"/>
    <testcase name="should ignore unknown attributes" time="0.001" classname="jqlite Chrome 21.0.HTML htmlSanitizerWriter"/>
    <testcase name="should not allow attributes" time="0.002" classname="jqlite Chrome 21.0.HTML htmlSanitizerWriter explicitly dissallow"/>
    <testcase name="should not allow tags" time="0.001" classname="jqlite Chrome 21.0.HTML htmlSanitizerWriter explicitly dissallow"/>
    <testcase name="should be URI" time="0.002" classname="jqlite Chrome 21.0.HTML htmlSanitizerWriter isUri"/>
    <testcase name="should not be UIR" time="0.001" classname="jqlite Chrome 21.0.HTML htmlSanitizerWriter isUri"/>
    <testcase name="should ignore javascript:" time="0.001" classname="jqlite Chrome 21.0.HTML htmlSanitizerWriter javascript URL attribute"/>
    <testcase name="should ignore dec encoded javascript:" time="0.001" classname="jqlite Chrome 21.0.HTML htmlSanitizerWriter javascript URL attribute"/>
    <testcase name="should ignore decimal with leading 0 encodede javascript:" time="0.001" classname="jqlite Chrome 21.0.HTML htmlSanitizerWriter javascript URL attribute"/>
    <testcase name="should ignore hex encoded javascript:" time="0.002" classname="jqlite Chrome 21.0.HTML htmlSanitizerWriter javascript URL attribute"/>
    <testcase name="should ignore hex encoded whitespace javascript:" time="0.002" classname="jqlite Chrome 21.0.HTML htmlSanitizerWriter javascript URL attribute"/>
    <testcase name="should set html" time="0.002" classname="jqlite Chrome 21.0.ngBindHtml"/>
    <testcase name="should reset html when value is null or undefined" time="0.003" classname="jqlite Chrome 21.0.ngBindHtml"/>
    <testcase name="should do basic filter" time="0.002" classname="jqlite Chrome 21.0.linky"/>
    <testcase name="should handle mailto:" time="0.002" classname="jqlite Chrome 21.0.linky"/>
    <testcase name="should look like a Date" time="0.001" classname="jqlite Chrome 21.0.ngMock TzDate"/>
    <testcase name="should take millis as constructor argument" time="0.001" classname="jqlite Chrome 21.0.ngMock TzDate"/>
    <testcase name="should take dateString as constructor argument" time="0.001" classname="jqlite Chrome 21.0.ngMock TzDate"/>
    <testcase name="should fake getLocalDateString method" time="0.001" classname="jqlite Chrome 21.0.ngMock TzDate"/>
    <testcase name="should fake toISOString method" time="0" classname="jqlite Chrome 21.0.ngMock TzDate"/>
    <testcase name="should fake getHours method" time="0" classname="jqlite Chrome 21.0.ngMock TzDate"/>
    <testcase name="should fake getMinutes method" time="0.001" classname="jqlite Chrome 21.0.ngMock TzDate"/>
    <testcase name="should fake getSeconds method" time="0" classname="jqlite Chrome 21.0.ngMock TzDate"/>
    <testcase name="should create a date representing new year in Bratislava" time="0.001" classname="jqlite Chrome 21.0.ngMock TzDate"/>
    <testcase name="should delegate all the UTC methods to the original UTC Date object" time="0.001" classname="jqlite Chrome 21.0.ngMock TzDate"/>
    <testcase name="should throw error when no third param but toString called" time="0" classname="jqlite Chrome 21.0.ngMock TzDate"/>
    <testcase name="should provide log method" time="0.002" classname="jqlite Chrome 21.0.ngMock $log"/>
    <testcase name="should provide info method" time="0.001" classname="jqlite Chrome 21.0.ngMock $log"/>
    <testcase name="should provide warn method" time="0.001" classname="jqlite Chrome 21.0.ngMock $log"/>
    <testcase name="should provide error method" time="0.001" classname="jqlite Chrome 21.0.ngMock $log"/>
    <testcase name="should store log messages" time="0.002" classname="jqlite Chrome 21.0.ngMock $log"/>
    <testcase name="should store info messages" time="0.002" classname="jqlite Chrome 21.0.ngMock $log"/>
    <testcase name="should store warn messages" time="0.002" classname="jqlite Chrome 21.0.ngMock $log"/>
    <testcase name="should store error messages" time="0.001" classname="jqlite Chrome 21.0.ngMock $log"/>
    <testcase name="should assertEmpty" time="0.005" classname="jqlite Chrome 21.0.ngMock $log"/>
    <testcase name="should reset state" time="0.002" classname="jqlite Chrome 21.0.ngMock $log"/>
    <testcase name="should flush" time="0.002" classname="jqlite Chrome 21.0.ngMock defer"/>
    <testcase name="should flush delayed" time="0.001" classname="jqlite Chrome 21.0.ngMock defer"/>
    <testcase name="should defer and flush over time" time="0.002" classname="jqlite Chrome 21.0.ngMock defer"/>
    <testcase name="should throw an exception if there is nothing to be flushed" time="0.001" classname="jqlite Chrome 21.0.ngMock defer"/>
    <testcase name="should rethrow exceptions" time="0.002" classname="jqlite Chrome 21.0.ngMock $exceptionHandler"/>
    <testcase name="should log exceptions" time="0" classname="jqlite Chrome 21.0.ngMock $exceptionHandler"/>
    <testcase name="should throw on wrong argument" time="0.001" classname="jqlite Chrome 21.0.ngMock $exceptionHandler"/>
    <testcase name="should expose flush method that will flush the pending queue of tasks" time="0.002" classname="jqlite Chrome 21.0.ngMock $timeout"/>
    <testcase name="should serialize primitive types" time="0" classname="jqlite Chrome 21.0.ngMock angular.mock.dump"/>
    <testcase name="should serialize element" time="0.001" classname="jqlite Chrome 21.0.ngMock angular.mock.dump"/>
    <testcase name="should serialize scope" time="0.002" classname="jqlite Chrome 21.0.ngMock angular.mock.dump"/>
    <testcase name="should be published on window" time="0" classname="jqlite Chrome 21.0.ngMock angular.mock.dump"/>
    <testcase name="should remove data" time="0.001" classname="jqlite Chrome 21.0.ngMock angular.mock.clearDataCache"/>
    <testcase name="should deregister event handlers" time="0.001" classname="jqlite Chrome 21.0.ngMock angular.mock.clearDataCache"/>
    <testcase name="should load module" time="0.04" classname="jqlite Chrome 21.0.ngMock jasmine module and inject module in DSL"/>
    <testcase name="should load module" time="0.002" classname="jqlite Chrome 21.0.ngMock jasmine module and inject module inline in test"/>
    <testcase name="should load module" time="0.001" classname="jqlite Chrome 21.0.ngMock jasmine module and inject inject in DSL"/>
    <testcase name="should load module" time="0.001" classname="jqlite Chrome 21.0.ngMock jasmine module and inject inject inline in test"/>
    <testcase name="should inject" time="0.001" classname="jqlite Chrome 21.0.ngMock jasmine module and inject inject module with inject"/>
    <testcase name="should respond with first matched definition" time="0.001" classname="jqlite Chrome 21.0.ngMock $httpBackend"/>
    <testcase name="should throw error when unexpected request" time="0.002" classname="jqlite Chrome 21.0.ngMock $httpBackend"/>
    <testcase name="should match headers if specified" time="0.001" classname="jqlite Chrome 21.0.ngMock $httpBackend"/>
    <testcase name="should match data if specified" time="0.001" classname="jqlite Chrome 21.0.ngMock $httpBackend"/>
    <testcase name="should match only method" time="0.001" classname="jqlite Chrome 21.0.ngMock $httpBackend"/>
    <testcase name="should preserve the order of requests" time="0.002" classname="jqlite Chrome 21.0.ngMock $httpBackend"/>
    <testcase name="should take values" time="0.001" classname="jqlite Chrome 21.0.ngMock $httpBackend respond()"/>
    <testcase name="should take function" time="0.001" classname="jqlite Chrome 21.0.ngMock $httpBackend respond()"/>
    <testcase name="should default status code to 200" time="0.002" classname="jqlite Chrome 21.0.ngMock $httpBackend respond()"/>
    <testcase name="should default response headers to &quot;&quot;" time="0.001" classname="jqlite Chrome 21.0.ngMock $httpBackend respond()"/>
    <testcase name="should require specified order" time="0.001" classname="jqlite Chrome 21.0.ngMock $httpBackend expect()"/>
    <testcase name="should have precedence over when()" time="0.002" classname="jqlite Chrome 21.0.ngMock $httpBackend expect()"/>
    <testcase name="should throw exception when only headers differs from expectation" time="0.001" classname="jqlite Chrome 21.0.ngMock $httpBackend expect()"/>
    <testcase name="should throw exception when only data differs from expectation" time="0.001" classname="jqlite Chrome 21.0.ngMock $httpBackend expect()"/>
    <testcase name="should use when&apos;s respond() when no expect() respond is defined" time="0.001" classname="jqlite Chrome 21.0.ngMock $httpBackend expect()"/>
    <testcase name="flush() should flush requests fired during callbacks" time="0.001" classname="jqlite Chrome 21.0.ngMock $httpBackend flush()"/>
    <testcase name="should flush given number of pending requests" time="0.001" classname="jqlite Chrome 21.0.ngMock $httpBackend flush()"/>
    <testcase name="should throw exception when flushing more requests than pending" time="0.001" classname="jqlite Chrome 21.0.ngMock $httpBackend flush()"/>
    <testcase name="should throw exception when no request to flush" time="0.001" classname="jqlite Chrome 21.0.ngMock $httpBackend flush()"/>
    <testcase name="should throw exception if not all expectations satisfied" time="0.002" classname="jqlite Chrome 21.0.ngMock $httpBackend flush()"/>
    <testcase name="should throw an exception if no response defined" time="0.001" classname="jqlite Chrome 21.0.ngMock $httpBackend"/>
    <testcase name="should throw an exception if no response for exception and no definition" time="0.001" classname="jqlite Chrome 21.0.ngMock $httpBackend"/>
    <testcase name="should respond undefined when JSONP method" time="0.001" classname="jqlite Chrome 21.0.ngMock $httpBackend"/>
    <testcase name="should not have passThrough method" time="0.002" classname="jqlite Chrome 21.0.ngMock $httpBackend"/>
    <testcase name="should throw exception if not all expectations were satisfied" time="0.001" classname="jqlite Chrome 21.0.ngMock $httpBackend verifyExpectations"/>
    <testcase name="should do nothing when no expectation" time="0.001" classname="jqlite Chrome 21.0.ngMock $httpBackend verifyExpectations"/>
    <testcase name="should do nothing when all expectations satisfied" time="0.001" classname="jqlite Chrome 21.0.ngMock $httpBackend verifyExpectations"/>
    <testcase name="should throw exception if not all requests were flushed" time="0.001" classname="jqlite Chrome 21.0.ngMock $httpBackend verifyRequests"/>
    <testcase name="should remove all expectations" time="0.001" classname="jqlite Chrome 21.0.ngMock $httpBackend resetExpectations"/>
    <testcase name="should remove all pending responses" time="0.001" classname="jqlite Chrome 21.0.ngMock $httpBackend resetExpectations"/>
    <testcase name="should not remove definitions" time="0.001" classname="jqlite Chrome 21.0.ngMock $httpBackend resetExpectations"/>
    <testcase name="should provide expectGET shortcut method" time="0.001" classname="jqlite Chrome 21.0.ngMock $httpBackend expect/when shortcuts"/>
    <testcase name="should provide expectPOST shortcut method" time="0.001" classname="jqlite Chrome 21.0.ngMock $httpBackend expect/when shortcuts"/>
    <testcase name="should provide expectPUT shortcut method" time="0.001" classname="jqlite Chrome 21.0.ngMock $httpBackend expect/when shortcuts"/>
    <testcase name="should provide expectPATCH shortcut method" time="0.001" classname="jqlite Chrome 21.0.ngMock $httpBackend expect/when shortcuts"/>
    <testcase name="should provide expectDELETE shortcut method" time="0.001" classname="jqlite Chrome 21.0.ngMock $httpBackend expect/when shortcuts"/>
    <testcase name="should provide expectJSONP shortcut method" time="0.001" classname="jqlite Chrome 21.0.ngMock $httpBackend expect/when shortcuts"/>
    <testcase name="should provide whenGET shortcut method" time="0.001" classname="jqlite Chrome 21.0.ngMock $httpBackend expect/when shortcuts"/>
    <testcase name="should provide whenPOST shortcut method" time="0.001" classname="jqlite Chrome 21.0.ngMock $httpBackend expect/when shortcuts"/>
    <testcase name="should provide whenPUT shortcut method" time="0.001" classname="jqlite Chrome 21.0.ngMock $httpBackend expect/when shortcuts"/>
    <testcase name="should provide whenPATCH shortcut method" time="0.001" classname="jqlite Chrome 21.0.ngMock $httpBackend expect/when shortcuts"/>
    <testcase name="should provide whenDELETE shortcut method" time="0.002" classname="jqlite Chrome 21.0.ngMock $httpBackend expect/when shortcuts"/>
    <testcase name="should provide whenJSONP shortcut method" time="0.001" classname="jqlite Chrome 21.0.ngMock $httpBackend expect/when shortcuts"/>
    <testcase name="should accept url as regexp" time="0.001" classname="jqlite Chrome 21.0.ngMock $httpBackend MockHttpExpectation"/>
    <testcase name="should accept data as regexp" time="0.001" classname="jqlite Chrome 21.0.ngMock $httpBackend MockHttpExpectation"/>
    <testcase name="should ignore data only if undefined (not null or false)" time="0.001" classname="jqlite Chrome 21.0.ngMock $httpBackend MockHttpExpectation"/>
    <testcase name="should accept headers as function" time="0.002" classname="jqlite Chrome 21.0.ngMock $httpBackend MockHttpExpectation"/>
    <testcase name="should create mock application root" time="0.001" classname="jqlite Chrome 21.0.ngMock $rootElement"/>
    <testcase name="should delegate requests to the real backend when passThrough is invoked" time="0.001" classname="jqlite Chrome 21.0.ngMockE2E $httpBackend passThrough()"/>
    <testcase name="should flush responses via $browser.defer" time="0.002" classname="jqlite Chrome 21.0.ngMockE2E $httpBackend autoflush"/>
    <testcase name="should initialize notes with an empty array" time="0.001" classname="jqlite Chrome 21.0.example.personalLog.LogCtrl"/>
    <testcase name="should add newMsg to logs as a log entry" time="0.001" classname="jqlite Chrome 21.0.example.personalLog.LogCtrl addLog"/>
    <testcase name="should clear newMsg when log entry is persisted" time="0.002" classname="jqlite Chrome 21.0.example.personalLog.LogCtrl addLog"/>
    <testcase name="should store logs in the logs cookie" time="0.001" classname="jqlite Chrome 21.0.example.personalLog.LogCtrl addLog"/>
    <testcase name="should do nothing if newMsg is empty" time="0.001" classname="jqlite Chrome 21.0.example.personalLog.LogCtrl addLog"/>
    <testcase name="should delete a message identified by index" time="0.002" classname="jqlite Chrome 21.0.example.personalLog.LogCtrl rmLog"/>
    <testcase name="should update cookies when a log is deleted" time="0.002" classname="jqlite Chrome 21.0.example.personalLog.LogCtrl rmLog"/>
    <testcase name="should remove all logs" time="0.001" classname="jqlite Chrome 21.0.example.personalLog.LogCtrl rmLogs"/>
    <testcase name="should remove logs cookie" time="0.002" classname="jqlite Chrome 21.0.example.personalLog.LogCtrl rmLogs"/>
    <system-out/>
    <system-err/>
  </testsuite>
</testsuites>
